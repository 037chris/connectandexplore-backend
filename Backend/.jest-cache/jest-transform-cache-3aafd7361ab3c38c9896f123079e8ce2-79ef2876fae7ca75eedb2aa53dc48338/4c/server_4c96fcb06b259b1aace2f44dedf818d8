d74a4cb761f5c107c4a296cab83d4246
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bodyParser = require("body-parser");
const fs = require("fs");
const cors = require("cors");
const key = fs.readFileSync("./certificates/key.pem");
const cert = fs.readFileSync("./certificates/cert.pem");
const db_1 = require("./database/db");
const CreateAdminUser_1 = __importDefault(require("./src/utils/CreateAdminUser"));
const https_1 = __importDefault(require("https"));
const http = require("http");
const swagger_1 = __importDefault(require("./src/utils/swagger"));
const UserRoute_1 = __importDefault(require("./src/routes/UserRoute"));
const UsersRouter_1 = __importDefault(require("./src/routes/UsersRouter"));
const login_1 = __importDefault(require("./src/routes/login"));
const EventRoute_1 = __importDefault(require("./src/routes/EventRoute"));
const app = (0, express_1.default)();
const port = process.env.PORT || 443;
/* Routes */
app.use("*", cors());
app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    res.header("Access-Control-Expose-Headers", "Authorization");
    next();
});
app.use(bodyParser.json());
app.use(express_1.default.urlencoded({ extended: true }));
app.use(express_1.default.static(__dirname));
app.use("/api/users", UserRoute_1.default);
app.use("/api", UsersRouter_1.default);
app.use("/api/login", login_1.default);
app.use("/api/events", EventRoute_1.default);
(0, swagger_1.default)(app, +port);
app.use((req, res, next) => {
    res.status(404).json("Not Found");
});
(0, db_1.connect)()
    .then(async () => {
    // Create admin user after connecting to the database
    await (0, CreateAdminUser_1.default)();
    let server = https_1.default.createServer({ key, cert }, app);
    server.listen(port, () => {
        console.log("Listening on port 443");
    });
})
    .catch((err) => {
    console.error("Failed to connect to the database:", err);
});
exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBOEQ7QUFDOUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUN4RCxzQ0FBd0M7QUFDeEMsa0ZBQTBEO0FBQzFELGtEQUEwQjtBQUMxQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0Isa0VBQThDO0FBQzlDLHVFQUErQztBQUMvQywyRUFBbUQ7QUFDbkQsK0RBQTZDO0FBQzdDLHlFQUFrRDtBQUNsRCxNQUFNLEdBQUcsR0FBWSxJQUFBLGlCQUFPLEdBQUUsQ0FBQztBQUMvQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7QUFDckMsWUFBWTtBQUNaLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFckIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLGdEQUFnRCxDQUNqRCxDQUFDO0lBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM3RCxJQUFJLEVBQUUsQ0FBQztBQUNULENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzQixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsbUJBQVMsQ0FBQyxDQUFDO0FBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHFCQUFXLENBQUMsQ0FBQztBQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFXLENBQUMsQ0FBQztBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxvQkFBVyxDQUFDLENBQUM7QUFDcEMsSUFBQSxpQkFBVyxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBQSxZQUFPLEdBQUU7S0FDTixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDZixxREFBcUQ7SUFDckQsTUFBTSxJQUFBLHlCQUFlLEdBQUUsQ0FBQztJQUN4QixJQUFJLE1BQU0sR0FBRyxlQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7S0FDRCxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0QsQ0FBQyxDQUFDLENBQUM7QUFFTCxrQkFBZSxHQUFHLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MsIHsgRXhwcmVzcywgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuY29uc3QgY29ycyA9IHJlcXVpcmUoXCJjb3JzXCIpO1xyXG5jb25zdCBrZXkgPSBmcy5yZWFkRmlsZVN5bmMoXCIuL2NlcnRpZmljYXRlcy9rZXkucGVtXCIpO1xyXG5jb25zdCBjZXJ0ID0gZnMucmVhZEZpbGVTeW5jKFwiLi9jZXJ0aWZpY2F0ZXMvY2VydC5wZW1cIik7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwiLi9kYXRhYmFzZS9kYlwiO1xyXG5pbXBvcnQgY3JlYXRlQWRtaW5Vc2VyIGZyb20gXCIuL3NyYy91dGlscy9DcmVhdGVBZG1pblVzZXJcIjtcclxuaW1wb3J0IGh0dHBzIGZyb20gXCJodHRwc1wiO1xyXG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XHJcbmltcG9ydCBzd2FnZ2VyRG9jcyBmcm9tIFwiLi9zcmMvdXRpbHMvc3dhZ2dlclwiO1xyXG5pbXBvcnQgVXNlclJvdXRlIGZyb20gXCIuL3NyYy9yb3V0ZXMvVXNlclJvdXRlXCI7XHJcbmltcG9ydCBVc2Vyc1JvdXRlciBmcm9tIFwiLi9zcmMvcm91dGVzL1VzZXJzUm91dGVyXCI7XHJcbmltcG9ydCBsb2dpblJvdXRlciBmcm9tIFwiLi9zcmMvcm91dGVzL2xvZ2luXCI7XHJcbmltcG9ydCBFdmVudFJvdXRlciBmcm9tIFwiLi9zcmMvcm91dGVzL0V2ZW50Um91dGVcIjtcclxuY29uc3QgYXBwOiBFeHByZXNzID0gZXhwcmVzcygpO1xyXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA0NDM7XHJcbi8qIFJvdXRlcyAqL1xyXG5hcHAudXNlKFwiKlwiLCBjb3JzKCkpO1xyXG5cclxuYXBwLnVzZShmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcclxuICByZXMuaGVhZGVyKFxyXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsXHJcbiAgICBcIk9yaWdpbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQ29udGVudC1UeXBlLCBBY2NlcHRcIlxyXG4gICk7XHJcbiAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzXCIsIFwiQXV0aG9yaXphdGlvblwiKTtcclxuICBuZXh0KCk7XHJcbn0pO1xyXG5cclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSkpO1xyXG5hcHAudXNlKFwiL2FwaS91c2Vyc1wiLCBVc2VyUm91dGUpO1xyXG5hcHAudXNlKFwiL2FwaVwiLCBVc2Vyc1JvdXRlcik7XHJcbmFwcC51c2UoXCIvYXBpL2xvZ2luXCIsIGxvZ2luUm91dGVyKTtcclxuYXBwLnVzZShcIi9hcGkvZXZlbnRzXCIsIEV2ZW50Um91dGVyKTtcclxuc3dhZ2dlckRvY3MoYXBwLCArcG9ydCk7XHJcbmFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgcmVzLnN0YXR1cyg0MDQpLmpzb24oXCJOb3QgRm91bmRcIik7XHJcbn0pO1xyXG5cclxuY29ubmVjdCgpXHJcbiAgLnRoZW4oYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQ3JlYXRlIGFkbWluIHVzZXIgYWZ0ZXIgY29ubmVjdGluZyB0byB0aGUgZGF0YWJhc2VcclxuICAgIGF3YWl0IGNyZWF0ZUFkbWluVXNlcigpO1xyXG4gICAgbGV0IHNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7IGtleSwgY2VydCB9LCBhcHApO1xyXG4gICAgc2VydmVyLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTGlzdGVuaW5nIG9uIHBvcnQgNDQzXCIpO1xyXG4gICAgfSk7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZTpcIiwgZXJyKTtcclxuICB9KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFwcDtcclxuIl0sInZlcnNpb24iOjN9