{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\model\\EventModel.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\model\\EventModel.test.ts"],"sourcesContent":["import { Types } from \"mongoose\";\r\nimport { Event, ICategory, IEvent } from \"../../src/model/EventModel\";\r\nimport { clearDatabase, closeDatabase, connect } from \"../../database/db\";\r\nimport { IAddress } from \"../../src/model/UserModel\";\r\n\r\nconst a: IAddress = {\r\n  street: \"Street\",\r\n  houseNumber: \"1\",\r\n  postalCode: \"12345\",\r\n  city: \"Berlin\",\r\n  country: \"Germany\",\r\n};\r\n\r\nconst c: ICategory = {\r\n  name: \"Hobbys\",\r\n  description: \"persÃ¶nliche Interessen, Freizeit\",\r\n};\r\n\r\ndescribe(\"Event Model Tests\", () => {\r\n  beforeAll(async () => await connect());\r\n  afterEach(async () => await clearDatabase());\r\n  afterAll(async () => await closeDatabase());\r\n\r\n  test(\"create event\", async () => {\r\n    const eventData: IEvent = {\r\n      name: \"Test Event\",\r\n      creator: new Types.ObjectId(),\r\n      description: \"A test event\",\r\n      price: 10,\r\n      date: new Date(),\r\n      address: a,\r\n      category: [c],\r\n      chat: new Types.ObjectId(),\r\n      participants: [],\r\n    };\r\n    const createdEvent = await Event.create(eventData);\r\n    expect(createdEvent).toBeDefined();\r\n    expect(createdEvent.name).toBe(eventData.name);\r\n    expect(createdEvent.creator).toBe(eventData.creator);\r\n    expect(createdEvent.description).toBe(eventData.description);\r\n    expect(createdEvent.price).toBe(eventData.price);\r\n    expect(createdEvent.date).toBe(eventData.date);\r\n    expect(createdEvent.address).toMatchObject(a);\r\n    expect(createdEvent.category.map(c => c.name)).toContain(\"Hobbys\");\r\n    expect(createdEvent.chat).toBe(eventData.chat);\r\n    expect(createdEvent.participants).toStrictEqual(eventData.participants);\r\n  });\r\n\r\n  test(\"empty eventdata\", async () => {\r\n    const eventData: IEvent = {\r\n      name: \"\",\r\n      creator: new Types.ObjectId(),\r\n      description: \"\",\r\n      price: 0,\r\n      date: undefined,\r\n      address: undefined,\r\n      category: [],\r\n      chat: new Types.ObjectId(),\r\n      participants: [],\r\n    };\r\n    await expect(Event.create(eventData)).rejects.toThrow();\r\n  });\r\n\r\n  test(\"negative price\", async () => {\r\n    const eventData: IEvent = {\r\n      name: \"Test Event\",\r\n      creator: new Types.ObjectId(),\r\n      description: \"A test event\",\r\n      price: -1,\r\n      date: new Date(),\r\n      address: a,\r\n      category: [c],\r\n      chat: new Types.ObjectId(),\r\n      participants: [],\r\n    };\r\n    await expect(Event.create(eventData)).rejects.toThrow();\r\n  });\r\n});\r\n"],"version":3}