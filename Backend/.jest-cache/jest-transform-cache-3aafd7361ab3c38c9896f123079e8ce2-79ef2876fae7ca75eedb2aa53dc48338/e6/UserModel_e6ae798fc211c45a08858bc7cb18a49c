9f0478dc2b6cd903e7e176c0027583a2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.addressSchema = exports.userRole = void 0;
const mongoose_1 = require("mongoose");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
var userRole;
(function (userRole) {
    userRole["User"] = "u";
    userRole["Admin"] = "a";
})(userRole || (exports.userRole = userRole = {}));
/**
 * Adressen werden später in das UserSchema eingefügt und als teil eines Users in mongoDB gespeichert
 */
exports.addressSchema = new mongoose_1.Schema({
    street: { type: String, required: true },
    houseNumber: { type: String, required: true },
    apartmentNumber: String,
    postalCode: { type: String, required: true },
    city: { type: String, required: true },
    stateOrRegion: String,
    country: { type: String, required: true },
});
const userSchema = new mongoose_1.Schema({
    email: { type: String, required: true, unique: true },
    name: {
        first: { type: String, required: true },
        last: { type: String, required: true },
    },
    password: { type: String, required: true },
    isAdministrator: { type: Boolean, default: false },
    address: exports.addressSchema,
    profilePicture: String,
    birthDate: { type: Date, required: true },
    gender: { type: String, required: true },
    socialMediaUrls: {
        facebook: String,
        instagram: String,
    },
    isActive: { type: Boolean, default: true },
});
userSchema.pre("save", async function () {
    if (this.isModified("password")) {
        const hashedPassword = await bcryptjs_1.default.hash(this.password, 10);
        this.password = hashedPassword;
    }
});
userSchema.pre("updateOne", { document: false, query: true }, async function () {
    const update = this.getUpdate();
    if ((update === null || update === void 0 ? void 0 : update.password) != null) {
        const hashedPassword = await bcryptjs_1.default.hash(update.password, 10);
        update.password = hashedPassword;
    }
});
userSchema.method("isCorrectPassword", async function (password) {
    const isPW = await bcryptjs_1.default.compare(password, this.password);
    return isPW;
});
exports.User = (0, mongoose_1.model)("User", userSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXG1vZGVsXFxVc2VyTW9kZWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQWlFO0FBQ2pFLHdEQUE4QjtBQStCOUIsSUFBWSxRQUdYO0FBSEQsV0FBWSxRQUFRO0lBQ2xCLHNCQUFVLENBQUE7SUFDVix1QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLFFBQVEsd0JBQVIsUUFBUSxRQUduQjtBQU1EOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3RDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN4QyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDN0MsZUFBZSxFQUFFLE1BQU07SUFDdkIsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzVDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN0QyxhQUFhLEVBQUUsTUFBTTtJQUNyQixPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBTSxDQUFtQjtJQUM5QyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNyRCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7UUFDdkMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0tBQ3ZDO0lBQ0QsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtJQUNsRCxPQUFPLEVBQUUscUJBQWE7SUFDdEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ3pDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN4QyxlQUFlLEVBQUU7UUFDZixRQUFRLEVBQUUsTUFBTTtRQUNoQixTQUFTLEVBQUUsTUFBTTtLQUNsQjtJQUNELFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtDQUMzQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLO0lBQzFCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sY0FBYyxHQUFHLE1BQU0sa0JBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztJQUNqQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsR0FBRyxDQUNaLFdBQVcsRUFDWCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUNoQyxLQUFLO0lBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFFckIsQ0FBQztJQUNULElBQUksQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsUUFBUSxLQUFJLElBQUksRUFBRSxDQUFDO1FBQzdCLE1BQU0sY0FBYyxHQUFHLE1BQU0sa0JBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztJQUNuQyxDQUFDO0FBQ0gsQ0FBQyxDQUNGLENBQUM7QUFFRixVQUFVLENBQUMsTUFBTSxDQUNmLG1CQUFtQixFQUNuQixLQUFLLFdBQVcsUUFBZ0I7SUFDOUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxrQkFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUNGLENBQUM7QUFFVyxRQUFBLElBQUksR0FBRyxJQUFBLGdCQUFLLEVBQW1CLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG5hY2V1XFxPbmVEcml2ZVxcRGVza3RvcFxcU3R1ZGl1bVxcNSBTZW1lc3RlclxcUHJvamVrdFxcY29ubmVjdGFuZGV4cGxvcmVcXEJhY2tlbmRcXHNyY1xcbW9kZWxcXFVzZXJNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UsIHsgTW9kZWwsIG1vZGVsLCBTY2hlbWEsIFF1ZXJ5IH0gZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmltcG9ydCBiY3J5cHQgZnJvbSBcImJjcnlwdGpzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElVc2VyIHtcclxuICBlbWFpbDogc3RyaW5nO1xyXG4gIG5hbWU6IHtcclxuICAgIGZpcnN0OiBzdHJpbmc7XHJcbiAgICBsYXN0OiBzdHJpbmc7XHJcbiAgfTtcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG4gIGlzQWRtaW5pc3RyYXRvcjogQm9vbGVhbjtcclxuICBhZGRyZXNzOiBJQWRkcmVzcztcclxuICBwcm9maWxlUGljdHVyZT86IHN0cmluZztcclxuICBiaXJ0aERhdGU6IERhdGU7XHJcbiAgZ2VuZGVyOiBzdHJpbmc7XHJcbiAgc29jaWFsTWVkaWFVcmxzPzoge1xyXG4gICAgZmFjZWJvb2s/OiBzdHJpbmc7XHJcbiAgICBpbnN0YWdyYW0/OiBzdHJpbmc7XHJcbiAgfTtcclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQWRkcmVzcyB7XHJcbiAgc3RyZWV0OiBTdHJpbmc7XHJcbiAgaG91c2VOdW1iZXI6IFN0cmluZztcclxuICBhcGFydG1lbnROdW1iZXI/OiBTdHJpbmc7XHJcbiAgcG9zdGFsQ29kZTogU3RyaW5nO1xyXG4gIGNpdHk6IFN0cmluZztcclxuICBzdGF0ZU9yUmVnaW9uPzogU3RyaW5nO1xyXG4gIGNvdW50cnk6IFN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGVudW0gdXNlclJvbGUge1xyXG4gIFVzZXIgPSBcInVcIixcclxuICBBZG1pbiA9IFwiYVwiLFxyXG59XHJcbmludGVyZmFjZSBJVXNlck1ldGhvZHMge1xyXG4gIGlzQ29ycmVjdFBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG59XHJcbnR5cGUgVXNlck1vZGVsID0gTW9kZWw8SVVzZXIsIHt9LCBJVXNlck1ldGhvZHM+O1xyXG5cclxuLyoqXHJcbiAqIEFkcmVzc2VuIHdlcmRlbiBzcMOkdGVyIGluIGRhcyBVc2VyU2NoZW1hIGVpbmdlZsO8Z3QgdW5kIGFscyB0ZWlsIGVpbmVzIFVzZXJzIGluIG1vbmdvREIgZ2VzcGVpY2hlcnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBhZGRyZXNzU2NoZW1hID0gbmV3IFNjaGVtYSh7XHJcbiAgc3RyZWV0OiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICBob3VzZU51bWJlcjogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgYXBhcnRtZW50TnVtYmVyOiBTdHJpbmcsXHJcbiAgcG9zdGFsQ29kZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgY2l0eTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgc3RhdGVPclJlZ2lvbjogU3RyaW5nLFxyXG4gIGNvdW50cnk6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG59KTtcclxuXHJcbmNvbnN0IHVzZXJTY2hlbWEgPSBuZXcgU2NoZW1hPElVc2VyLCBVc2VyTW9kZWw+KHtcclxuICBlbWFpbDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlLCB1bmlxdWU6IHRydWUgfSxcclxuICBuYW1lOiB7XHJcbiAgICBmaXJzdDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICBsYXN0OiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICB9LFxyXG4gIHBhc3N3b3JkOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICBpc0FkbWluaXN0cmF0b3I6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSxcclxuICBhZGRyZXNzOiBhZGRyZXNzU2NoZW1hLFxyXG4gIHByb2ZpbGVQaWN0dXJlOiBTdHJpbmcsXHJcbiAgYmlydGhEYXRlOiB7IHR5cGU6IERhdGUsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgZ2VuZGVyOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICBzb2NpYWxNZWRpYVVybHM6IHtcclxuICAgIGZhY2Vib29rOiBTdHJpbmcsXHJcbiAgICBpbnN0YWdyYW06IFN0cmluZyxcclxuICB9LFxyXG4gIGlzQWN0aXZlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSxcclxufSk7XHJcblxyXG51c2VyU2NoZW1hLnByZShcInNhdmVcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmlzTW9kaWZpZWQoXCJwYXNzd29yZFwiKSkge1xyXG4gICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaCh0aGlzLnBhc3N3b3JkLCAxMCk7XHJcbiAgICB0aGlzLnBhc3N3b3JkID0gaGFzaGVkUGFzc3dvcmQ7XHJcbiAgfVxyXG59KTtcclxuXHJcbnVzZXJTY2hlbWEucHJlKFxyXG4gIFwidXBkYXRlT25lXCIsXHJcbiAgeyBkb2N1bWVudDogZmFsc2UsIHF1ZXJ5OiB0cnVlIH0sXHJcbiAgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgdXBkYXRlID0gdGhpcy5nZXRVcGRhdGUoKSBhc1xyXG4gICAgICB8IChRdWVyeTxhbnksIElVc2VyPiAmIHsgcGFzc3dvcmQ/OiBzdHJpbmcgfSlcclxuICAgICAgfCBudWxsO1xyXG4gICAgaWYgKHVwZGF0ZT8ucGFzc3dvcmQgIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHVwZGF0ZS5wYXNzd29yZCwgMTApO1xyXG4gICAgICB1cGRhdGUucGFzc3dvcmQgPSBoYXNoZWRQYXNzd29yZDtcclxuICAgIH1cclxuICB9LFxyXG4pO1xyXG5cclxudXNlclNjaGVtYS5tZXRob2QoXHJcbiAgXCJpc0NvcnJlY3RQYXNzd29yZFwiLFxyXG4gIGFzeW5jIGZ1bmN0aW9uIChwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBpc1BXID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHRoaXMucGFzc3dvcmQpO1xyXG4gICAgcmV0dXJuIGlzUFc7XHJcbiAgfSxcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBVc2VyID0gbW9kZWw8SVVzZXIsIFVzZXJNb2RlbD4oXCJVc2VyXCIsIHVzZXJTY2hlbWEpO1xyXG4iXSwidmVyc2lvbiI6M30=