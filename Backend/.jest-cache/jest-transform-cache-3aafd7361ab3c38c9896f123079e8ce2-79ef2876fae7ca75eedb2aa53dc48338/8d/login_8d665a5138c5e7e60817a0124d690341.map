{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\login.ts","mappings":";;;;;AAAA,sDAA8B;AAC9B,yDAAwE;AAExE,uDAAoE;AAEpE,MAAM,WAAW,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwDG;AACH;;;GAGG;AACH,WAAW,CAAC,IAAI,CACd,GAAG,EACH,IAAA,wBAAI,EAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EACvB,IAAA,wBAAI,EAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,EACnC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACvB,MAAM,MAAM,GAAG,IAAA,oCAAgB,EAAC,GAAG,CAAC,CAAC;IACrC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;QACrB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KACzD;IACD,0DAA0D;IAC1D,MAAM,QAAQ,GAAG,IAAA,+BAAW,EAAC,GAAG,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,MAAM,IAAA,uCAA0B,EAChD,QAAQ,CAAC,KAAK,EACd,QAAQ,CAAC,QAAQ,CAClB,CAAC;IACF,IAAI,CAAC,SAAS,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;KACjC;IACD,MAAM,MAAM,GAAkB;QAC5B,YAAY,EAAE,SAAU;QACxB,UAAU,EAAE,QAAQ;KACrB,CAAC;IACF,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnB,CAAC,CACF,CAAC;AAEF,kBAAe,WAAW,CAAC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\login.ts"],"sourcesContent":["import express from \"express\";\r\nimport { body, matchedData, validationResult } from \"express-validator\";\r\nimport { LoginResource } from \"../Resources\";\r\nimport { verifyPasswordAndCreateJWT } from \"../services/JWTService\";\r\n\r\nconst loginRouter = express.Router();\r\n/**\r\n * @swagger\r\n * /api/login/:\r\n *  \"post\":\r\n *    \"summary\": \"Login user\"\r\n *    \"description\": \"Endpoint to log in a user\"\r\n *    \"tags\": [\r\n *      \"User\"\r\n *    ]\r\n *    \"parameters\": []\r\n *    \"requestBody\":\r\n *      \"content\":\r\n *        \"application/json\":\r\n *          \"schema\":\r\n *            \"type\": \"object\"\r\n *            \"properties\":\r\n *              \"email\":\r\n *                \"type\": \"string\"\r\n *              \"password\":\r\n *                \"type\": \"string\"\r\n *            \"required\":\r\n *              - \"email\"\r\n *              - \"password\"\r\n *          \"example\":\r\n *            \"email\": \"John@doe.com\"\r\n *            \"password\": \"12abcAB!\"\r\n *    \"responses\":\r\n *      \"200\":\r\n *        \"description\": \"OK\"\r\n *        \"content\":\r\n *          \"application/json\":\r\n *            \"schema\":\r\n *              \"type\": \"object\"\r\n *              \"properties\": {}\r\n *      \"400\":\r\n *        \"description\": \"Bad Request - Validation Error\"\r\n *        \"content\":\r\n *          \"application/json\":\r\n *            \"schema\":\r\n *              \"type\": \"object\"\r\n *              \"properties\":\r\n *                \"error\":\r\n *                  \"type\": \"string\"\r\n *                  \"example\": \"Validation failed: Please provide a valid email and password.\"\r\n *      \"401\":\r\n *        \"description\": \"Unauthorized - Missing JWT\"\r\n *        \"content\":\r\n *          \"application/json\":\r\n *            \"schema\":\r\n *              \"type\": \"object\"\r\n *              \"properties\":\r\n *                \"error\":\r\n *                  \"type\": \"string\"\r\n *                  \"example\": \"Unauthorized: No JWT token provided.\"\r\n *    \"security\":\r\n *      - \"bearerAuth\": []\r\n */\r\n/**\r\n * Diese Funktion bitte noch nicht implementieren, sie steht hier als Platzhalter.\r\n * Wir benötigen dafür Authentifizierungsinformationen, die wir später in einem JSW speichern.\r\n */\r\nloginRouter.post(\r\n  \"/\",\r\n  body(\"email\").isEmail(),\r\n  body(\"password\").isStrongPassword(),\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    //const loginResource = matchedData(req) as LoginResource;\r\n    const resource = matchedData(req);\r\n    const jwtstring = await verifyPasswordAndCreateJWT(\r\n      resource.email,\r\n      resource.password,\r\n    );\r\n    if (!jwtstring) {\r\n      res.status(401);\r\n      next(new Error(\"no jwtstring\"));\r\n    }\r\n    const result: LoginResource = {\r\n      access_token: jwtstring!,\r\n      token_type: \"Bearer\",\r\n    };\r\n    res.send(result);\r\n  },\r\n);\r\n\r\nexport default loginRouter;\r\n"],"version":3}