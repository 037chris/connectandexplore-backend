{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\services\\UserService.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\services\\UserService.ts"],"sourcesContent":["import { User } from \"../model/UserModel\";\r\nimport { usersResource, userResource } from \"../Resources\";\r\nexport class UserService {\r\n  async registerUser(user: any) {\r\n    if (!user || typeof user !== \"object\") {\r\n      throw new Error(\"Invalid user data\");\r\n    }\r\n    // Check if the user already exists in the database\r\n    const { email } = user;\r\n    const existingUser = await User.findOne({ email });\r\n\r\n    if (existingUser) {\r\n      throw new Error(\"User already exists\");\r\n    }\r\n    // Create a new user\r\n    try {\r\n      const newUser = await User.create(user);\r\n      return newUser;\r\n    } catch (error) {\r\n      throw new Error(\"Registration failed\");\r\n    }\r\n  }\r\n\r\n  async getUsers(): Promise<usersResource> {\r\n    const users = await User.find({}).exec();\r\n    const usersResource: usersResource = {\r\n      users: users.map((user) => ({\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        isAdministrator: user.isAdministrator,\r\n        address: user.address,\r\n        profilePicture: user.profilePicture,\r\n        birthDate: user.birthDate,\r\n        gender: user.gender,\r\n        socialMediaUrls: user.socialMediaUrls,\r\n        isActive: user.isActive,\r\n      })),\r\n    };\r\n    return usersResource;\r\n  }\r\n\r\n  async getUser(userID: string): Promise<userResource> {\r\n    if (!userID) {\r\n      throw new Error(\"Can not get user, userID is invalid\");\r\n    }\r\n    const user = await User.findOne({ _id: userID, isActive: true }).exec();\r\n    if (!user) {\r\n      throw new Error(`No user with id: ${userID} exists.`);\r\n    }\r\n    return {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      isAdministrator: user.isAdministrator,\r\n      address: user.address,\r\n      profilePicture: user.profilePicture,\r\n      birthDate: user.birthDate,\r\n      gender: user.gender,\r\n      socialMediaUrls: user.socialMediaUrls,\r\n      isActive: user.isActive,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * used to prefill db with standard admin user. Therefore this servicemethod does not need an endpoint.\r\n   * @param userResource\r\n   * @returns userResource\r\n   */\r\n  async createUser(userResource: userResource): Promise<userResource> {\r\n    const user = await User.create({\r\n      name: userResource.name,\r\n      email: userResource.email,\r\n      isAdministrator: userResource.isAdministrator,\r\n      address: userResource.address,\r\n      password: userResource.password,\r\n      profilePicture: userResource.profilePicture,\r\n      birthDate: userResource.birthDate,\r\n      gender: userResource.gender,\r\n      socialMediaUrls: userResource.socialMediaUrls,\r\n    });\r\n\r\n    return {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      isAdministrator: user.isAdministrator,\r\n      address: user.address,\r\n      profilePicture: user.profilePicture,\r\n      birthDate: user.birthDate,\r\n      gender: user.gender,\r\n      socialMediaUrls: user.socialMediaUrls,\r\n      isActive: user.isActive,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Admin function to update userdata. can update password & isAdministrator.\r\n   * @param userResource\r\n   * @returns userResource of updated user.\r\n   */\r\n  async updateUserWithAdmin(userResource: userResource): Promise<userResource> {\r\n    if (!userResource.id) {\r\n      throw new Error(\"User id is missing, cannot update User.\");\r\n    }\r\n    const user = await User.findById(userResource.id).exec();\r\n    if (!user) {\r\n      throw new Error(\r\n        `No user with id: ${userResource.id} found, cannot update`,\r\n      );\r\n    }\r\n    if (userResource.name) user.name = userResource.name;\r\n    if (userResource.email) {\r\n      userResource.email = userResource.email;\r\n      if (userResource.email !== user.email) {\r\n        const c = await User.count({ email: userResource.email }).exec();\r\n        if (c > 0) {\r\n          throw new Error(`Duplicate email`);\r\n        }\r\n      }\r\n      user.email = userResource.email;\r\n    }\r\n    if (userResource.password) user.password = userResource.password;\r\n    if (userResource.isAdministrator)\r\n      user.isAdministrator = userResource.isAdministrator;\r\n    if (userResource.address) user.address = userResource.address;\r\n    if (userResource.birthDate) user.birthDate = userResource.birthDate;\r\n    if (userResource.gender) user.gender = userResource.gender;\r\n    if (userResource.profilePicture)\r\n      user.profilePicture = userResource.profilePicture;\r\n    if (userResource.socialMediaUrls)\r\n      user.socialMediaUrls = userResource.socialMediaUrls;\r\n    if (userResource.isActive) user.isActive = userResource.isActive;\r\n    const savedUser = await user.save();\r\n    return {\r\n      id: savedUser.id,\r\n      name: savedUser.name,\r\n      email: savedUser.email,\r\n      address: savedUser.address,\r\n      isAdministrator: savedUser.isAdministrator,\r\n      birthDate: savedUser.birthDate,\r\n      gender: savedUser.gender,\r\n      socialMediaUrls: savedUser.socialMediaUrls,\r\n      isActive: savedUser.isActive,\r\n      profilePicture: savedUser.profilePicture,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * only admins can change isAdministrator:\r\n   * authorization to change isAdministrator is done in userRouter ->\r\n   * isAdministratorfield = null if user in req is not an admin\r\n   * @param userResource\r\n   * @param oldPw\r\n   * @returns userResource\r\n   */\r\n  async updateUserWithPw(\r\n    userResource: userResource,\r\n    oldPw?: string,\r\n  ): Promise<userResource> {\r\n    if (!userResource.id) {\r\n      throw new Error(\"User id is missing, cannot update User.\");\r\n    }\r\n    const user = await User.findById(userResource.id).exec();\r\n    if (!user) {\r\n      throw new Error(\r\n        `No user with id: ${userResource.id} found, cannot update`,\r\n      );\r\n    }\r\n    if (oldPw) {\r\n      const res = await user.isCorrectPassword(oldPw);\r\n      if (!res) {\r\n        throw new Error(\"invalid oldPassword, can not update User!\");\r\n      }\r\n      if (userResource.password) user.password = userResource.password;\r\n    }\r\n    if (userResource.name?.first) user.name.first = userResource.name.first;\r\n    if (userResource.name?.last) user.name.last = userResource.name.last;\r\n    if (userResource.email) {\r\n      userResource.email = userResource.email;\r\n      if (userResource.email !== user.email) {\r\n        const c = await User.count({ email: userResource.email }).exec();\r\n        if (c > 0) {\r\n          throw new Error(`Duplicate email`);\r\n        }\r\n      }\r\n      user.email = userResource.email;\r\n    }\r\n    if (userResource.address) user.address = userResource.address;\r\n    if (userResource.birthDate) user.birthDate = userResource.birthDate;\r\n    if (userResource.gender) user.gender = userResource.gender;\r\n    if (userResource.profilePicture)\r\n      user.profilePicture = userResource.profilePicture;\r\n    if (userResource.socialMediaUrls)\r\n      user.socialMediaUrls = userResource.socialMediaUrls;\r\n    const savedUser = await user.save();\r\n    return {\r\n      id: savedUser.id,\r\n      name: savedUser.name,\r\n      email: savedUser.email,\r\n      address: savedUser.address,\r\n      isAdministrator: savedUser.isAdministrator,\r\n      birthDate: savedUser.birthDate,\r\n      gender: savedUser.gender,\r\n      socialMediaUrls: savedUser.socialMediaUrls,\r\n      isActive: user.isActive,\r\n      profilePicture: savedUser.profilePicture,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This function is used to either disable a user account or to delete the account from the database.\r\n   * If the logged-in user is an admin (role in req.role === \"a\") and performs the \"delete\" endpoint request,\r\n   * inactivateAccount is set to false, and the user is deleted from the database.\r\n   * Otherwise, the user himself deactivates his account, and inactivateAccount is set to true.\r\n   * @param userID The ID of the user to be deactivated or deleted.\r\n   * @param inactivateAccount If true, user.isActive is set to false and the user object remains in the database; otherwise, the admin deletes the user from the database.\r\n   * @returns true if the user was deleted or inactivated, false if no user was deleted.\r\n   */\r\n  async deleteUser(\r\n    userID: string,\r\n    inactivateAccount: boolean,\r\n  ): Promise<boolean> {\r\n    if (!userID) {\r\n      throw new Error(\"invalid userID, can not delete/inactivate account\");\r\n    }\r\n    const u = await User.findOne({ _id: userID }).exec();\r\n    if (!u) {\r\n      throw new Error(\r\n        \"User not found, probably invalid userID or user is already deleted\",\r\n      );\r\n    }\r\n    if (inactivateAccount) {\r\n      u.isActive = false;\r\n      const user = await u.save();\r\n      return !user.isActive;\r\n    } else {\r\n      const res = await User.deleteOne({ _id: userID });\r\n      return res.deletedCount == 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n"],"version":3}