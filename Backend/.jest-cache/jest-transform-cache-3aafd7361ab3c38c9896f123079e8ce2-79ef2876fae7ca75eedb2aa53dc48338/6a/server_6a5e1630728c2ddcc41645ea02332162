02b5e068adad966687ac39f86161f740
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bodyParser = require("body-parser");
const fs = require("fs");
const cors = require("cors");
const key = fs.readFileSync("./certificates/key.pem");
const cert = fs.readFileSync("./certificates/cert.pem");
const db_1 = require("./database/db");
const CreateAdminUser_1 = __importDefault(require("./src/utils/CreateAdminUser"));
const https_1 = __importDefault(require("https"));
const http = require("http");
const swagger_1 = __importDefault(require("./src/utils/swagger"));
const UserRoute_1 = __importDefault(require("./src/routes/UserRoute"));
const UsersRouter_1 = __importDefault(require("./src/routes/UsersRouter"));
const login_1 = __importDefault(require("./src/routes/login"));
const EventRoute_1 = __importDefault(require("./src/routes/EventRoute"));
const app = (0, express_1.default)();
const port = process.env.PORT || 443;
/* Routes */
app.use("*", cors());
app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    res.header("Access-Control-Expose-Headers", "Authorization");
    next();
});
app.use(bodyParser.json());
app.use(express_1.default.urlencoded({ extended: true }));
app.use(express_1.default.static(__dirname));
app.use("/api/users", UserRoute_1.default);
app.use("/api", UsersRouter_1.default);
app.use("/api/login", login_1.default);
app.use("/api/events", EventRoute_1.default);
(0, swagger_1.default)(app, 443);
app.use((req, res, next) => {
    res.status(404).json("Not Found");
});
(0, db_1.connect)()
    .then(async () => {
    // Create admin user after connecting to the database
    await (0, CreateAdminUser_1.default)();
    let server = https_1.default.createServer({ key, cert }, app);
    server.listen(port, () => {
        console.log("Listening on port 443");
    });
})
    .catch((err) => {
    console.error("Failed to connect to the database:", err);
});
exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBOEQ7QUFDOUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUN4RCxzQ0FBd0M7QUFDeEMsa0ZBQTBEO0FBQzFELGtEQUEwQjtBQUMxQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0Isa0VBQThDO0FBQzlDLHVFQUErQztBQUMvQywyRUFBbUQ7QUFDbkQsK0RBQTZDO0FBQzdDLHlFQUFrRDtBQUNsRCxNQUFNLEdBQUcsR0FBWSxJQUFBLGlCQUFPLEdBQUUsQ0FBQztBQUMvQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7QUFDckMsWUFBWTtBQUNaLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFckIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLGdEQUFnRCxDQUNqRCxDQUFDO0lBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM3RCxJQUFJLEVBQUUsQ0FBQztBQUNULENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzQixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsbUJBQVMsQ0FBQyxDQUFDO0FBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHFCQUFXLENBQUMsQ0FBQztBQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFXLENBQUMsQ0FBQztBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxvQkFBVyxDQUFDLENBQUM7QUFDcEMsSUFBQSxpQkFBVyxFQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUN6QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsWUFBTyxHQUFFO0tBQ04sSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2YscURBQXFEO0lBQ3JELE1BQU0sSUFBQSx5QkFBZSxHQUFFLENBQUM7SUFDeEIsSUFBSSxNQUFNLEdBQUcsZUFBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0tBQ0QsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzNELENBQUMsQ0FBQyxDQUFDO0FBRUwsa0JBQWUsR0FBRyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbmFjZXVcXE9uZURyaXZlXFxEZXNrdG9wXFxTdHVkaXVtXFw1IFNlbWVzdGVyXFxQcm9qZWt0XFxjb25uZWN0YW5kZXhwbG9yZVxcQmFja2VuZFxcc2VydmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IEV4cHJlc3MsIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoXCJib2R5LXBhcnNlclwiKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IGNvcnMgPSByZXF1aXJlKFwiY29yc1wiKTtcclxuY29uc3Qga2V5ID0gZnMucmVhZEZpbGVTeW5jKFwiLi9jZXJ0aWZpY2F0ZXMva2V5LnBlbVwiKTtcclxuY29uc3QgY2VydCA9IGZzLnJlYWRGaWxlU3luYyhcIi4vY2VydGlmaWNhdGVzL2NlcnQucGVtXCIpO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcIi4vZGF0YWJhc2UvZGJcIjtcclxuaW1wb3J0IGNyZWF0ZUFkbWluVXNlciBmcm9tIFwiLi9zcmMvdXRpbHMvQ3JlYXRlQWRtaW5Vc2VyXCI7XHJcbmltcG9ydCBodHRwcyBmcm9tIFwiaHR0cHNcIjtcclxuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xyXG5pbXBvcnQgc3dhZ2dlckRvY3MgZnJvbSBcIi4vc3JjL3V0aWxzL3N3YWdnZXJcIjtcclxuaW1wb3J0IFVzZXJSb3V0ZSBmcm9tIFwiLi9zcmMvcm91dGVzL1VzZXJSb3V0ZVwiO1xyXG5pbXBvcnQgVXNlcnNSb3V0ZXIgZnJvbSBcIi4vc3JjL3JvdXRlcy9Vc2Vyc1JvdXRlclwiO1xyXG5pbXBvcnQgbG9naW5Sb3V0ZXIgZnJvbSBcIi4vc3JjL3JvdXRlcy9sb2dpblwiO1xyXG5pbXBvcnQgRXZlbnRSb3V0ZXIgZnJvbSBcIi4vc3JjL3JvdXRlcy9FdmVudFJvdXRlXCI7XHJcbmNvbnN0IGFwcDogRXhwcmVzcyA9IGV4cHJlc3MoKTtcclxuY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgNDQzO1xyXG4vKiBSb3V0ZXMgKi9cclxuYXBwLnVzZShcIipcIiwgY29ycygpKTtcclxuXHJcbmFwcC51c2UoZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XHJcbiAgcmVzLmhlYWRlcihcclxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLFxyXG4gICAgXCJPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0XCJcclxuICApO1xyXG4gIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVyc1wiLCBcIkF1dGhvcml6YXRpb25cIik7XHJcbiAgbmV4dCgpO1xyXG59KTtcclxuXHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUpKTtcclxuYXBwLnVzZShcIi9hcGkvdXNlcnNcIiwgVXNlclJvdXRlKTtcclxuYXBwLnVzZShcIi9hcGlcIiwgVXNlcnNSb3V0ZXIpO1xyXG5hcHAudXNlKFwiL2FwaS9sb2dpblwiLCBsb2dpblJvdXRlcik7XHJcbmFwcC51c2UoXCIvYXBpL2V2ZW50c1wiLCBFdmVudFJvdXRlcik7XHJcbnN3YWdnZXJEb2NzKGFwcCwgNDQzKTtcclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcclxuICByZXMuc3RhdHVzKDQwNCkuanNvbihcIk5vdCBGb3VuZFwiKTtcclxufSk7XHJcblxyXG5jb25uZWN0KClcclxuICAudGhlbihhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYWRtaW4gdXNlciBhZnRlciBjb25uZWN0aW5nIHRvIHRoZSBkYXRhYmFzZVxyXG4gICAgYXdhaXQgY3JlYXRlQWRtaW5Vc2VyKCk7XHJcbiAgICBsZXQgc2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHsga2V5LCBjZXJ0IH0sIGFwcCk7XHJcbiAgICBzZXJ2ZXIubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJMaXN0ZW5pbmcgb24gcG9ydCA0NDNcIik7XHJcbiAgICB9KTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOlwiLCBlcnIpO1xyXG4gIH0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwO1xyXG4iXSwidmVyc2lvbiI6M30=