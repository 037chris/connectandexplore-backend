03e0e49db91f045f349ce1551b826729
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearDatabase = exports.closeDatabase = exports.connect = void 0;
// Copyright: This script is taken from: https://codesandbox.io/s/typescript-forked-8vscow?file=/src/db.ts
const mongoose_1 = __importDefault(require("mongoose"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
let mongod;
const connect = async () => {
    mongod = await mongodb_memory_server_1.MongoMemoryServer.create();
    const uri = mongod.getUri();
    await mongoose_1.default
        .connect(uri, { dbName: "ConnectAndExplore" })
        .then((_result) => console.log("connected...."))
        .catch((err) => console.log(`Cannot connect => ${err}`));
};
exports.connect = connect;
/**
 * Close db connection
 */
const closeDatabase = async () => {
    await mongoose_1.default.connection.dropDatabase();
    await mongoose_1.default.connection.close();
    await mongod.stop();
};
exports.closeDatabase = closeDatabase;
/**
 * Delete db collections
 */
const clearDatabase = async () => {
    const collections = mongoose_1.default.connection.collections;
    for (const key in collections) {
        const collection = collections[key];
        await collection.deleteMany({});
    }
};
exports.clearDatabase = clearDatabase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxkYXRhYmFzZVxcZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMEdBQTBHO0FBQzFHLHdEQUFnQztBQUNoQyxpRUFBMEQ7QUFFMUQsSUFBSSxNQUFXLENBQUM7QUFFVCxNQUFNLE9BQU8sR0FBRyxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLEdBQUcsTUFBTSx5Q0FBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsTUFBTSxrQkFBUTtTQUNYLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztTQUM3QyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDL0MsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDO0FBUFcsUUFBQSxPQUFPLFdBT2xCO0FBRUY7O0dBRUc7QUFDSSxNQUFNLGFBQWEsR0FBRyxLQUFLLElBQUksRUFBRTtJQUN0QyxNQUFNLGtCQUFRLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLE1BQU0sa0JBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbEMsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBSlcsUUFBQSxhQUFhLGlCQUl4QjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdEMsTUFBTSxXQUFXLEdBQUcsa0JBQVEsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO0lBRXBELEtBQUssTUFBTSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDOUIsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBUFcsUUFBQSxhQUFhLGlCQU94QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG5hY2V1XFxPbmVEcml2ZVxcRGVza3RvcFxcU3R1ZGl1bVxcNSBTZW1lc3RlclxcUHJvamVrdFxcY29ubmVjdGFuZGV4cGxvcmVcXEJhY2tlbmRcXGRhdGFiYXNlXFxkYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQ6IFRoaXMgc2NyaXB0IGlzIHRha2VuIGZyb206IGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy90eXBlc2NyaXB0LWZvcmtlZC04dnNjb3c/ZmlsZT0vc3JjL2RiLnRzXHJcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcclxuaW1wb3J0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSBmcm9tIFwibW9uZ29kYi1tZW1vcnktc2VydmVyXCI7XHJcblxyXG5sZXQgbW9uZ29kOiBhbnk7XHJcblxyXG5leHBvcnQgY29uc3QgY29ubmVjdCA9IGFzeW5jICgpID0+IHtcclxuICBtb25nb2QgPSBhd2FpdCBNb25nb01lbW9yeVNlcnZlci5jcmVhdGUoKTtcclxuICBjb25zdCB1cmkgPSBtb25nb2QuZ2V0VXJpKCk7XHJcbiAgYXdhaXQgbW9uZ29vc2VcclxuICAgIC5jb25uZWN0KHVyaSwgeyBkYk5hbWU6IFwiQ29ubmVjdEFuZEV4cGxvcmVcIiB9KVxyXG4gICAgLnRoZW4oKF9yZXN1bHQpID0+IGNvbnNvbGUubG9nKFwiY29ubmVjdGVkLi4uLlwiKSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhgQ2Fubm90IGNvbm5lY3QgPT4gJHtlcnJ9YCkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsb3NlIGRiIGNvbm5lY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBjbG9zZURhdGFiYXNlID0gYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uZHJvcERhdGFiYXNlKCk7XHJcbiAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gIGF3YWl0IG1vbmdvZC5zdG9wKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVsZXRlIGRiIGNvbGxlY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2xlYXJEYXRhYmFzZSA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBjb2xsZWN0aW9ucyA9IG1vbmdvb3NlLmNvbm5lY3Rpb24uY29sbGVjdGlvbnM7XHJcblxyXG4gIGZvciAoY29uc3Qga2V5IGluIGNvbGxlY3Rpb25zKSB7XHJcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbnNba2V5XTtcclxuICAgIGF3YWl0IGNvbGxlY3Rpb24uZGVsZXRlTWFueSh7fSk7XHJcbiAgfVxyXG59O1xyXG4iXSwidmVyc2lvbiI6M30=