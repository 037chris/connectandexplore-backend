{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\EventRoute.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\EventRoute.ts"],"sourcesContent":["import express from \"express\";\r\nimport { EventService } from \"../services/EventService\";\r\nimport {\r\n  optionalAuthentication,\r\n  requiresAuthentication,\r\n} from \"./authentication\";\r\nimport { eventResource, eventsResource } from \"../Resources\";\r\nimport {\r\n  body,\r\n  matchedData,\r\n  param,\r\n  query,\r\n  validationResult,\r\n} from \"express-validator\";\r\nimport { deleteEventThumbnail, upload } from \"../utils/FileUpload\";\r\n\r\nconst EventRouter = express.Router();\r\nconst eventService = new EventService();\r\n\r\n/**\r\n * @swagger\r\n * /api/events/search:\r\n *   get:\r\n *     summary: \"Search for events\"\r\n *     description: \"Search events based on a query string\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"query\"\r\n *         in: \"query\"\r\n *         required: true\r\n *         schema:\r\n *           type: \"string\"\r\n *         description: \"The query string to search for events\"\r\n *     responses:\r\n *       200:\r\n *         description: \"Successful response\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: \"#/components/schemas/IEvent\"\r\n *       204:\r\n *         description: \"No events found matching the query\"\r\n *       400:\r\n *         description: \"Bad request. Validation error in the query string\"\r\n *       404:\r\n *         description: \"Not found. The requested resource does not exist\"\r\n *       500:\r\n *         description: \"Internal server error\"\r\n */\r\nEventRouter.get(\r\n  \"/search\",\r\n  optionalAuthentication,\r\n  [query(\"query\").isString().notEmpty()],\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    try {\r\n      const term = req.query.query as string;\r\n      const events: eventsResource = await eventService.searchEvents(term);\r\n      if (events.events.length === 0) {\r\n        return res\r\n          .status(204)\r\n          .json({ message: \"No events found matching the query.\" });\r\n      }\r\n      res.status(200).send(events);\r\n    } catch (err) {\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * paths:\r\n *  /api/events/create:\r\n *    post:\r\n *     summary: Create a new event\r\n *     description: Register a new event with event data and an optional event pictures.\r\n *     tags:\r\n *       - Event\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *              type: object\r\n *              properties:\r\n *                name:\r\n *                  type: string\r\n *                  example: \"Test Event\"\r\n *                price:\r\n *                  type: number\r\n *                  example: 0\r\n *                description:\r\n *                  type: string\r\n *                  example: \"Test Event description\"\r\n *                date:\r\n *                  type: string\r\n *                  format: date\r\n *                  example: \"2000-01-01\"\r\n *                address[street]:\r\n *                  type: string\r\n *                  example: \"123 Test Street\"\r\n *                address[houseNumber]:\r\n *                  type: string\r\n *                  example: \"1\"\r\n *                address[apartmentNumber]:\r\n *                  type: string\r\n *                  example: \"123\"\r\n *                address[postalCode]:\r\n *                  type: string\r\n *                  example: \"12345\"\r\n *                address[city]:\r\n *                  type: string\r\n *                  example: \"Berlin\"\r\n *                address[stateOrRegion]:\r\n *                  type: string\r\n *                  example: \"Berlin\"\r\n *                address[country]:\r\n *                  type: string\r\n *                  example: \"DE\"\r\n *                thumbnail:\r\n *                  type: string\r\n *                  example: []\r\n *                  format: binary\r\n *                hashtags:\r\n *                  type: array\r\n *                  items:\r\n *                    type: string\r\n *                  example: [\"sport\", \"freizeit\"]\r\n *                category:\r\n *                  type: array\r\n *                  items:\r\n *                    type: object\r\n *                    properties:\r\n *                      name:\r\n *                        type: string\r\n *                        example: \"Hobbys\"\r\n *                      description:\r\n *                        type: string\r\n *                        example: \"persönliche Interessen, Freizeit\"\r\n *              required:\r\n *                - name\r\n *                - price\r\n *                - description\r\n *                - date\r\n *                - name[first]\r\n *                - name[last]\r\n *                - address[street]\r\n *                - address[houseNumber]\r\n *                - address[postalCode]\r\n *                - address[city]\r\n *                - address[country]\r\n *                - category\r\n *     responses:\r\n *       201:\r\n *         description: Event created successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/IEvent'\r\n *       400:\r\n *         description: Bad request, validation error\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: Bad request, validation error\r\n *       500:\r\n *         description: Internal server error\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: Creating new event failed\r\n */\r\n\r\nEventRouter.post(\r\n  \"/create\",\r\n  requiresAuthentication,\r\n  upload.single(\"thumbnail\"),\r\n  [\r\n    body(\"name\").isString().notEmpty().withMessage(\"Event name is required.\"),\r\n    //body(\"creator\").isString().notEmpty(),\r\n    body(\"price\").isNumeric().notEmpty(),\r\n    body(\"description\")\r\n      .isString()\r\n      .notEmpty()\r\n      .withMessage(\"Description is required.\"),\r\n    body(\"date\") /* .isDate() */\r\n      .notEmpty(),\r\n    body(\"address.street\")\r\n      .notEmpty()\r\n      .withMessage(\"Street address is required.\"),\r\n    body(\"address.houseNumber\")\r\n      .notEmpty()\r\n      .withMessage(\"House number is required.\"),\r\n    body(\"address.postalCode\")\r\n      .notEmpty()\r\n      .withMessage(\"Postal code is required.\"),\r\n    body(\"address.city\").notEmpty().withMessage(\"City is required.\"),\r\n    body(\"address.country\").notEmpty().withMessage(\"Country is required.\"),\r\n    body(\"address.stateOrRegion\")\r\n      .optional()\r\n      .isString()\r\n      .withMessage(\"Invalid State or Region.\"),\r\n    body(\"address.apartmentNumber\")\r\n      .optional()\r\n      .isString()\r\n      .withMessage(\"Invalid Apartment number.\"),\r\n    body(\"thumbnail\").optional().isString(),\r\n    body(\"hashtags\").optional().isArray(),\r\n    body(\"category\")\r\n      .isArray()\r\n      .notEmpty()\r\n      .withMessage(\"Categories are required.\"),\r\n    //body(\"chat\").isString().notEmpty(),\r\n  ],\r\n  async (req, res) => {\r\n    try {\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        if (req.file) {\r\n          // Delete the file\r\n          deleteEventThumbnail(req.file.path);\r\n        }\r\n        return res.status(400).json({ errors: errors.array() });\r\n      } else {\r\n        if (req.file) {\r\n          req.body.thumbnail = `/uploads/${req.file.filename}`;\r\n        }\r\n        const newEvent = await eventService.createEvent(req.body, req.userId);\r\n        return res.status(201).send(newEvent);\r\n      }\r\n    } catch (err) {\r\n      return res.status(500).json({ Error: \"Event creation failed\" });\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/{eventid}/join:\r\n *   post:\r\n *     summary: \"Join an event\"\r\n *     deprecated: false\r\n *     description: \"The User can join event\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"eventid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the event to join\"\r\n *     responses:\r\n *       \"200\":\r\n *         description: \"User joined the event successfully\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"409\":\r\n *         description: \"User is already participating in the event\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"User is already participating in the event.\"\r\n *       \"404\":\r\n *         description: \"Not Found - Invalid userID\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"No user or event with this ID exists.\"\r\n *       \"500\":\r\n *         description: \"Joining event failed\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Joining event failed\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nEventRouter.post(\r\n  \"/:eventid/join\",\r\n  requiresAuthentication,\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    try {\r\n      await eventService.joinEvent(req.userId, req.params.eventid);\r\n      res.status(200).json({ message: \"User joined the event successfully\" });\r\n    } catch (err) {\r\n      if (err.message === \"User not found\") {\r\n        return res.status(404).json({ Error: err.message });\r\n      } else if (err.message === \"Event not found\") {\r\n        return res.status(404).json({ Error: err.message });\r\n      } else if (err.message === \"User is already participating in the event\") {\r\n        return res.status(409).json({ Error: err.message });\r\n      } else {\r\n        return res.status(500).json({ Error: \"Joining event failed\" });\r\n      }\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/{eventid}/cancel:\r\n *   delete:\r\n *     summary: \"Cancel participating in event\"\r\n *     deprecated: false\r\n *     description: \"Canceling of participating in event\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"eventid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the event to cancel participating in\"\r\n *     responses:\r\n *       \"204\":\r\n *         description: \"User canceled the participating in the event successfully\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"409\":\r\n *         description: \"User is not participating in the event or Can not cancel participation as event manager\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"User is not participating in the event or Can not cancel participation as event manager\"\r\n *       \"500\":\r\n *         description: \"Canceling event failed\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Canceling event failed\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nEventRouter.delete(\r\n  \"/:eventid/cancel\",\r\n  requiresAuthentication,\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    try {\r\n      await eventService.cancelEvent(req.userId, req.params.eventid);\r\n      res.status(204).send();\r\n    } catch (err) {\r\n      if (\r\n        err.message === \"User is not participating in the event\" ||\r\n        err.message === \"Can not cancel participation as event manager\"\r\n      ) {\r\n        return res.status(409).json({ Error: err.message });\r\n      } else {\r\n        return res.status(500).json({ Error: \"Canceling event failed\" });\r\n      }\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/joined:\r\n *   get:\r\n *     summary: \"Get all joined events\"\r\n *     deprecated: false\r\n *     description: \"Retrieve all participated events ( Event participant )\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     responses:\r\n *       '200':\r\n *         description: Returns all joined events\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 events:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/IEvent'\r\n *       '204':\r\n *         description: No events found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *       '404':\r\n *         description: Not found\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nEventRouter.get(\"/joined\", requiresAuthentication, async (req, res, next) => {\r\n  try {\r\n    const events: eventsResource = await eventService.getJoinedEvents(\r\n      req.userId\r\n    );\r\n    if (events.events.length === 0) {\r\n      return res.status(204).json({ message: \"No events found.\" });\r\n    }\r\n    res.status(200).send(events);\r\n  } catch (err) {\r\n    res.status(404);\r\n    next(err);\r\n  }\r\n});\r\n/**\r\n * @swagger\r\n * /api/events/{eventid}/participants:\r\n *   get:\r\n *     summary: \"Retrieve all participants in event\"\r\n *     deprecated: false\r\n *     description: \"Retrieve a list of all participants in event\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"eventid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the event to cancel participating in\"\r\n *     responses:\r\n *       200:\r\n *         description: \"Successful response\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"array\"\r\n *               items:\r\n *                 type: \"string\"\r\n *                 description: \"User ID of a participant\"\r\n *       404:\r\n *         description: \"Event not found or no participants found for the specified event\"\r\n *       500:\r\n *         description: \"Internal server error\"\r\n */\r\nEventRouter.get(\r\n  \"/:eventid/participants\",\r\n  requiresAuthentication,\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    try {\r\n      const participants = await eventService.getParticipants(\r\n        req.params.eventid,\r\n        req.userId,\r\n      );\r\n      res.status(200).send(participants);\r\n    } catch (err) {\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/{eventid}:\r\n *   get:\r\n *     summary: \"Retrieve information of an event\"\r\n *     deprecated: false\r\n *     description: \"Retrieve all data of Event with eventid\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"eventid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the event to retrieve the event data\"\r\n *     responses:\r\n *       200:\r\n *         description: \"Successful response\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *               $ref: '#/components/schemas/IEvent'\r\n *       400:\r\n *         description: \"Validation error\"\r\n *       404:\r\n *         description: \"Event not found for the specified event\"\r\n *       500:\r\n *         description: \"Internal server error\"\r\n */\r\nEventRouter.get(\r\n  \"/:eventid\",\r\n  optionalAuthentication,\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    try {\r\n      const event = await eventService.getEvent(req.params.eventid);\r\n      res.status(200).send(event);\r\n    } catch (err) {\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nEventRouter.put(\r\n  \"/:eventid\",\r\n  requiresAuthentication,\r\n  upload.single(\"thumbnail\"),\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      if (req.file) {\r\n        // Delete the file\r\n        deleteEventThumbnail(req.file.path);\r\n      }\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    try {\r\n      const event = await eventService.getEvent(req.params.eventid);\r\n      if (req.file) {\r\n        req.body.thumbnail = `/uploads/${req.file.filename}`;\r\n        if (event.thumbnail) deleteEventThumbnail(event.thumbnail);\r\n      }\r\n      const eventResource = req.body as eventResource;\r\n      const updatedEvent = await eventService.updateEvent(\r\n        req.params.eventid,\r\n        eventResource,\r\n        req.userId\r\n      );\r\n      res.status(200).send(updatedEvent);\r\n    } catch (err) {\r\n      deleteEventThumbnail(req.body.thumbnail);\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/{eventid}:\r\n *   delete:\r\n *     summary: \"Delete event\"\r\n *     deprecated: false\r\n *     description: \"Deleting event with eventID as an event manager or admin\"\r\n *     tags:\r\n *       - \"Event\"\r\n *     parameters:\r\n *       - name: \"eventid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the event to delete\"\r\n *     responses:\r\n *       \"204\":\r\n *         description: \"Event successfully deleted\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"405\":\r\n *         description: \"Event could not be deleted\"\r\n *       \"404\":\r\n *         description: \"Event not found\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nEventRouter.delete(\r\n  \"/:eventid\",\r\n  requiresAuthentication,\r\n  param(\"eventid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    try {\r\n      const event = await eventService.getEvent(req.params.eventid);\r\n      const deleted = await eventService.deleteEvent(\r\n        req.params.eventid,\r\n        req.userId,\r\n      );\r\n      if (event.thumbnail) deleteEventThumbnail(event.thumbnail);\r\n      if (deleted) {\r\n        res.status(204).json({ message: \"Event successfully deleted\" });\r\n      } else {\r\n        res.status(405).json({ error: \"Event could not be deleted\" });\r\n      }\r\n    } catch (err) {\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/creator/{userid}:\r\n *   get:\r\n *     summary: Get all created events of a user\r\n *     deprecated: false\r\n *     description: \"Retrieve all events created by a user where the user is an admin or retrieve events associated with the authenticated user.\"\r\n *     tags:\r\n *       - Event\r\n *     parameters:\r\n *       - name: \"userid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the user\"\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       '200':\r\n *         description: Returns all created events\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 events:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/IEvent'\r\n *       '204':\r\n *         description: No events found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *       '403':\r\n *         description: Invalid authorization\r\n *       '404':\r\n *         description: Not found\r\n */\r\nEventRouter.get(\r\n  \"/creator/:userid\",\r\n  requiresAuthentication,\r\n  param(\"userid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    if (req.role === \"a\" || req.params.userid === req.userId) {\r\n      try {\r\n        const userID = req.params.userid;\r\n        const events: eventsResource = await eventService.getEvents(userID);\r\n        if (events.events.length === 0) {\r\n          return res.status(204).json({ message: \"No events found.\" });\r\n        }\r\n        res.status(200).send(events);\r\n      } catch (err) {\r\n        res.status(404);\r\n        next(err);\r\n      }\r\n    } else {\r\n      res.status(403);\r\n      next(new Error(\"Invalid authorization\"));\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/events/:\r\n *   get:\r\n *     summary: Get all events\r\n *     tags:\r\n *       - Event\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       '200':\r\n *         description: Returns all events\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 events:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/IEvent'\r\n *       '204':\r\n *         description: No events found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *       '404':\r\n *         description: Not found\r\n */\r\nEventRouter.get(\"/\", optionalAuthentication, async (req, res, next) => {\r\n  try {\r\n    const events: eventsResource = await eventService.getAllEvents();\r\n    if (events.events.length === 0) {\r\n      return res.status(204).json({ message: \"No events found.\" });\r\n    }\r\n    res.status(200).send(events);\r\n  } catch (err) {\r\n    res.status(404);\r\n    next(err);\r\n  }\r\n});\r\n\r\nexport default EventRouter;\r\n"],"version":3}