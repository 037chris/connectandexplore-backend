359f9f63ec7df1dce1dbf76d99e4893e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const express_validator_1 = require("express-validator");
const validateIfPresent = (field, validators) => {
    return (req, res, next) => {
        // Check if the field exists in the request body and has a value
        // && req.body[field] !== ""
        if (req.body[field] !== undefined) {
            return validators(req, res, next);
        }
        // If the field is absent or empty, skip the validation
        return next();
    };
};
// Validation middleware
exports.validate = [
    validateIfPresent("email", (0, express_validator_1.body)("email").isEmail()),
    validateIfPresent("name.first", (0, express_validator_1.body)("name.first").isString()),
    validateIfPresent("name.last", (0, express_validator_1.body)("name.last").isString()),
    validateIfPresent("password", (0, express_validator_1.body)("password").isStrongPassword()),
    validateIfPresent("isAdministrator", (0, express_validator_1.body)("isAdministrator").isBoolean()),
    //validateIfPresent("oldPassword", body("oldPassword").isStrongPassword()),
    validateIfPresent("address.street", (0, express_validator_1.body)("address.street").isString()),
    validateIfPresent("address.houseNumber", (0, express_validator_1.body)("address.houseNumber")
        .isNumeric()
        .withMessage("houseNumber is required.")),
    validateIfPresent("address.postalCode", (0, express_validator_1.body)("address.postalCode")
        .isNumeric()
        .withMessage("Postal code is required.")),
    validateIfPresent("address.city", (0, express_validator_1.body)("address.city").isString().withMessage("City is required.")),
    validateIfPresent("address.country", (0, express_validator_1.body)("address.country").isString().withMessage("Country is required.")),
    validateIfPresent("address.stateOrRegion", (0, express_validator_1.body)("address.stateOrRegion")
        .isString()
        .withMessage("invalid State or Region.")),
    validateIfPresent("address.appartmentNumber", (0, express_validator_1.body)("address.appartmentNumber")
        .isString()
        .withMessage("invalid Appartmentnumber.")),
    validateIfPresent("profilePicture", (0, express_validator_1.body)("profilePicture").isString()),
    validateIfPresent("birthDate", (0, express_validator_1.body)("birthDate").isString()),
    validateIfPresent("gender", (0, express_validator_1.body)("gender").isString()),
    validateIfPresent("socialMediaUrls.facebook", (0, express_validator_1.body)("socialMediaUrls.facebook").isString()),
    validateIfPresent('socialMediaUrls.instagram"', (0, express_validator_1.body)("socialMediaUrls.instagram").isString()),
];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXHV0aWxzXFxIZWxwZXJzLnRzIiwibWFwcGluZ3MiOiI7OztBQUVBLHlEQUEyRDtBQUUzRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsS0FBYSxFQUFFLFVBQWUsRUFBRSxFQUFFO0lBQzNELE9BQU8sQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtRQUN6RCxnRUFBZ0U7UUFDaEUsNEJBQTRCO1FBQzVCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDakMsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNuQztRQUNELHVEQUF1RDtRQUN2RCxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLHdCQUF3QjtBQUNYLFFBQUEsUUFBUSxHQUFHO0lBQ3RCLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFBLHdCQUFJLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkQsaUJBQWlCLENBQUMsWUFBWSxFQUFFLElBQUEsd0JBQUksRUFBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5RCxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBQSx3QkFBSSxFQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVELGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFBLHdCQUFJLEVBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNsRSxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxJQUFBLHdCQUFJLEVBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUV6RSwyRUFBMkU7SUFDM0UsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsSUFBQSx3QkFBSSxFQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEUsaUJBQWlCLENBQ2YscUJBQXFCLEVBQ3JCLElBQUEsd0JBQUksRUFBQyxxQkFBcUIsQ0FBQztTQUN4QixTQUFTLEVBQUU7U0FDWCxXQUFXLENBQUMsMEJBQTBCLENBQUMsQ0FDM0M7SUFDRCxpQkFBaUIsQ0FDZixvQkFBb0IsRUFDcEIsSUFBQSx3QkFBSSxFQUFDLG9CQUFvQixDQUFDO1NBQ3ZCLFNBQVMsRUFBRTtTQUNYLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxDQUMzQztJQUNELGlCQUFpQixDQUNmLGNBQWMsRUFDZCxJQUFBLHdCQUFJLEVBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQ2pFO0lBQ0QsaUJBQWlCLENBQ2YsaUJBQWlCLEVBQ2pCLElBQUEsd0JBQUksRUFBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUN2RTtJQUNELGlCQUFpQixDQUNmLHVCQUF1QixFQUN2QixJQUFBLHdCQUFJLEVBQUMsdUJBQXVCLENBQUM7U0FDMUIsUUFBUSxFQUFFO1NBQ1YsV0FBVyxDQUFDLDBCQUEwQixDQUFDLENBQzNDO0lBQ0QsaUJBQWlCLENBQ2YsMEJBQTBCLEVBQzFCLElBQUEsd0JBQUksRUFBQywwQkFBMEIsQ0FBQztTQUM3QixRQUFRLEVBQUU7U0FDVixXQUFXLENBQUMsMkJBQTJCLENBQUMsQ0FDNUM7SUFDRCxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFBLHdCQUFJLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN0RSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBQSx3QkFBSSxFQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVELGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFBLHdCQUFJLEVBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEQsaUJBQWlCLENBQ2YsMEJBQTBCLEVBQzFCLElBQUEsd0JBQUksRUFBQywwQkFBMEIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUM1QztJQUNELGlCQUFpQixDQUNmLDRCQUE0QixFQUM1QixJQUFBLHdCQUFJLEVBQUMsMkJBQTJCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDN0M7Q0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbmFjZXVcXE9uZURyaXZlXFxEZXNrdG9wXFxTdHVkaXVtXFw1IFNlbWVzdGVyXFxQcm9qZWt0XFxjb25uZWN0YW5kZXhwbG9yZVxcQmFja2VuZFxcc3JjXFx1dGlsc1xcSGVscGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVXNlciB9IGZyb20gXCIuLi9tb2RlbC9Vc2VyTW9kZWxcIjtcclxuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gXCJleHByZXNzXCI7XHJcbmltcG9ydCB7IHZhbGlkYXRpb25SZXN1bHQsIGJvZHkgfSBmcm9tIFwiZXhwcmVzcy12YWxpZGF0b3JcIjtcclxuXHJcbmNvbnN0IHZhbGlkYXRlSWZQcmVzZW50ID0gKGZpZWxkOiBzdHJpbmcsIHZhbGlkYXRvcnM6IGFueSkgPT4ge1xyXG4gIHJldHVybiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSBmaWVsZCBleGlzdHMgaW4gdGhlIHJlcXVlc3QgYm9keSBhbmQgaGFzIGEgdmFsdWVcclxuICAgIC8vICYmIHJlcS5ib2R5W2ZpZWxkXSAhPT0gXCJcIlxyXG4gICAgaWYgKHJlcS5ib2R5W2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB2YWxpZGF0b3JzKHJlcSwgcmVzLCBuZXh0KTtcclxuICAgIH1cclxuICAgIC8vIElmIHRoZSBmaWVsZCBpcyBhYnNlbnQgb3IgZW1wdHksIHNraXAgdGhlIHZhbGlkYXRpb25cclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfTtcclxufTtcclxuXHJcbi8vIFZhbGlkYXRpb24gbWlkZGxld2FyZVxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSBbXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJlbWFpbFwiLCBib2R5KFwiZW1haWxcIikuaXNFbWFpbCgpKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcIm5hbWUuZmlyc3RcIiwgYm9keShcIm5hbWUuZmlyc3RcIikuaXNTdHJpbmcoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJuYW1lLmxhc3RcIiwgYm9keShcIm5hbWUubGFzdFwiKS5pc1N0cmluZygpKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcInBhc3N3b3JkXCIsIGJvZHkoXCJwYXNzd29yZFwiKS5pc1N0cm9uZ1Bhc3N3b3JkKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwiaXNBZG1pbmlzdHJhdG9yXCIsIGJvZHkoXCJpc0FkbWluaXN0cmF0b3JcIikuaXNCb29sZWFuKCkpLFxyXG5cclxuICAvL3ZhbGlkYXRlSWZQcmVzZW50KFwib2xkUGFzc3dvcmRcIiwgYm9keShcIm9sZFBhc3N3b3JkXCIpLmlzU3Ryb25nUGFzc3dvcmQoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJhZGRyZXNzLnN0cmVldFwiLCBib2R5KFwiYWRkcmVzcy5zdHJlZXRcIikuaXNTdHJpbmcoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXHJcbiAgICBcImFkZHJlc3MuaG91c2VOdW1iZXJcIixcclxuICAgIGJvZHkoXCJhZGRyZXNzLmhvdXNlTnVtYmVyXCIpXHJcbiAgICAgIC5pc051bWVyaWMoKVxyXG4gICAgICAud2l0aE1lc3NhZ2UoXCJob3VzZU51bWJlciBpcyByZXF1aXJlZC5cIilcclxuICApLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFxyXG4gICAgXCJhZGRyZXNzLnBvc3RhbENvZGVcIixcclxuICAgIGJvZHkoXCJhZGRyZXNzLnBvc3RhbENvZGVcIilcclxuICAgICAgLmlzTnVtZXJpYygpXHJcbiAgICAgIC53aXRoTWVzc2FnZShcIlBvc3RhbCBjb2RlIGlzIHJlcXVpcmVkLlwiKVxyXG4gICksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXHJcbiAgICBcImFkZHJlc3MuY2l0eVwiLFxyXG4gICAgYm9keShcImFkZHJlc3MuY2l0eVwiKS5pc1N0cmluZygpLndpdGhNZXNzYWdlKFwiQ2l0eSBpcyByZXF1aXJlZC5cIilcclxuICApLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFxyXG4gICAgXCJhZGRyZXNzLmNvdW50cnlcIixcclxuICAgIGJvZHkoXCJhZGRyZXNzLmNvdW50cnlcIikuaXNTdHJpbmcoKS53aXRoTWVzc2FnZShcIkNvdW50cnkgaXMgcmVxdWlyZWQuXCIpXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgIFwiYWRkcmVzcy5zdGF0ZU9yUmVnaW9uXCIsXHJcbiAgICBib2R5KFwiYWRkcmVzcy5zdGF0ZU9yUmVnaW9uXCIpXHJcbiAgICAgIC5pc1N0cmluZygpXHJcbiAgICAgIC53aXRoTWVzc2FnZShcImludmFsaWQgU3RhdGUgb3IgUmVnaW9uLlwiKSxcclxuICApLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFxyXG4gICAgXCJhZGRyZXNzLmFwcGFydG1lbnROdW1iZXJcIixcclxuICAgIGJvZHkoXCJhZGRyZXNzLmFwcGFydG1lbnROdW1iZXJcIilcclxuICAgICAgLmlzU3RyaW5nKClcclxuICAgICAgLndpdGhNZXNzYWdlKFwiaW52YWxpZCBBcHBhcnRtZW50bnVtYmVyLlwiKSxcclxuICApLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwicHJvZmlsZVBpY3R1cmVcIiwgYm9keShcInByb2ZpbGVQaWN0dXJlXCIpLmlzU3RyaW5nKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwiYmlydGhEYXRlXCIsIGJvZHkoXCJiaXJ0aERhdGVcIikuaXNTdHJpbmcoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJnZW5kZXJcIiwgYm9keShcImdlbmRlclwiKS5pc1N0cmluZygpKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgIFwic29jaWFsTWVkaWFVcmxzLmZhY2Vib29rXCIsXHJcbiAgICBib2R5KFwic29jaWFsTWVkaWFVcmxzLmZhY2Vib29rXCIpLmlzU3RyaW5nKCksXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgICdzb2NpYWxNZWRpYVVybHMuaW5zdGFncmFtXCInLFxyXG4gICAgYm9keShcInNvY2lhbE1lZGlhVXJscy5pbnN0YWdyYW1cIikuaXNTdHJpbmcoKSxcclxuICApLFxyXG5dO1xyXG4iXSwidmVyc2lvbiI6M30=