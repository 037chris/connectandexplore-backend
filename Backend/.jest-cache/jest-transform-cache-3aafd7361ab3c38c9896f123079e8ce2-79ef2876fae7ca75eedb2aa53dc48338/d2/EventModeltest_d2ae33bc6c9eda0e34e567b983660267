d3ca2de6072c0a9f730c92875002ea4d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const EventModel_1 = require("../../src/model/EventModel");
const db_1 = require("../../database/db");
const a = {
    street: "Street",
    houseNumber: "1",
    postalCode: "12345",
    city: "Berlin",
    country: "Germany",
};
const c = {
    name: "Hobbys",
    description: "persÃ¶nliche Interessen, Freizeit",
};
describe("Event Model Tests", () => {
    beforeAll(async () => await (0, db_1.connect)());
    afterEach(async () => await (0, db_1.clearDatabase)());
    afterAll(async () => await (0, db_1.closeDatabase)());
    test("create event", async () => {
        const eventData = {
            name: "Test Event",
            creator: new mongoose_1.Types.ObjectId(),
            description: "A test event",
            price: 10,
            date: new Date(),
            address: a,
            category: [c],
            chat: new mongoose_1.Types.ObjectId(),
            participants: [],
        };
        const createdEvent = await EventModel_1.Event.create(eventData);
        expect(createdEvent).toBeDefined();
        expect(createdEvent.name).toBe(eventData.name);
        expect(createdEvent.creator).toBe(eventData.creator);
        expect(createdEvent.description).toBe(eventData.description);
        expect(createdEvent.price).toBe(eventData.price);
        expect(createdEvent.date).toBe(eventData.date);
        expect(createdEvent.address).toMatchObject(a);
        expect(createdEvent.category.map(c => c.name)).toContain("Hobbys");
        expect(createdEvent.chat).toBe(eventData.chat);
        expect(createdEvent.participants).toStrictEqual(eventData.participants);
    });
    test("empty eventdata", async () => {
        const eventData = {
            name: "",
            creator: new mongoose_1.Types.ObjectId(),
            description: "",
            price: 0,
            date: undefined,
            address: undefined,
            category: [],
            chat: new mongoose_1.Types.ObjectId(),
            participants: [],
        };
        await expect(EventModel_1.Event.create(eventData)).rejects.toThrow();
    });
    test("negative price", async () => {
        const eventData = {
            name: "Test Event",
            creator: new mongoose_1.Types.ObjectId(),
            description: "A test event",
            price: -1,
            date: new Date(),
            address: a,
            category: [c],
            chat: new mongoose_1.Types.ObjectId(),
            participants: [],
        };
        await expect(EventModel_1.Event.create(eventData)).rejects.toThrow();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFx0ZXN0c1xcbW9kZWxcXEV2ZW50TW9kZWwudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFpQztBQUNqQywyREFBc0U7QUFDdEUsMENBQTBFO0FBRzFFLE1BQU0sQ0FBQyxHQUFhO0lBQ2xCLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFdBQVcsRUFBRSxHQUFHO0lBQ2hCLFVBQVUsRUFBRSxPQUFPO0lBQ25CLElBQUksRUFBRSxRQUFRO0lBQ2QsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxHQUFjO0lBQ25CLElBQUksRUFBRSxRQUFRO0lBQ2QsV0FBVyxFQUFFLGtDQUFrQztDQUNoRCxDQUFDO0FBRUYsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUEsWUFBTyxHQUFFLENBQUMsQ0FBQztJQUN2QyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUEsa0JBQWEsR0FBRSxDQUFDLENBQUM7SUFDN0MsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFBLGtCQUFhLEdBQUUsQ0FBQyxDQUFDO0lBRTVDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUIsTUFBTSxTQUFTLEdBQVc7WUFDeEIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsT0FBTyxFQUFFLElBQUksZ0JBQUssQ0FBQyxRQUFRLEVBQUU7WUFDN0IsV0FBVyxFQUFFLGNBQWM7WUFDM0IsS0FBSyxFQUFFLEVBQUU7WUFDVCxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDaEIsT0FBTyxFQUFFLENBQUM7WUFDVixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUs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XG5hY2V1XFxPbmVEcml2ZVxcRGVza3RvcFxcU3R1ZGl1bVxcNSBTZW1lc3RlclxcUHJvamVrdFxcY29ubmVjdGFuZGV4cGxvcmVcXEJhY2tlbmRcXHRlc3RzXFxtb2RlbFxcRXZlbnRNb2RlbC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVzIH0gZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmltcG9ydCB7IEV2ZW50LCBJQ2F0ZWdvcnksIElFdmVudCB9IGZyb20gXCIuLi8uLi9zcmMvbW9kZWwvRXZlbnRNb2RlbFwiO1xyXG5pbXBvcnQgeyBjbGVhckRhdGFiYXNlLCBjbG9zZURhdGFiYXNlLCBjb25uZWN0IH0gZnJvbSBcIi4uLy4uL2RhdGFiYXNlL2RiXCI7XHJcbmltcG9ydCB7IElBZGRyZXNzIH0gZnJvbSBcIi4uLy4uL3NyYy9tb2RlbC9Vc2VyTW9kZWxcIjtcclxuXHJcbmNvbnN0IGE6IElBZGRyZXNzID0ge1xyXG4gIHN0cmVldDogXCJTdHJlZXRcIixcclxuICBob3VzZU51bWJlcjogXCIxXCIsXHJcbiAgcG9zdGFsQ29kZTogXCIxMjM0NVwiLFxyXG4gIGNpdHk6IFwiQmVybGluXCIsXHJcbiAgY291bnRyeTogXCJHZXJtYW55XCIsXHJcbn07XHJcblxyXG5jb25zdCBjOiBJQ2F0ZWdvcnkgPSB7XHJcbiAgbmFtZTogXCJIb2JieXNcIixcclxuICBkZXNjcmlwdGlvbjogXCJwZXJzw7ZubGljaGUgSW50ZXJlc3NlbiwgRnJlaXplaXRcIixcclxufTtcclxuXHJcbmRlc2NyaWJlKFwiRXZlbnQgTW9kZWwgVGVzdHNcIiwgKCkgPT4ge1xyXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiBhd2FpdCBjb25uZWN0KCkpO1xyXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiBhd2FpdCBjbGVhckRhdGFiYXNlKCkpO1xyXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IGF3YWl0IGNsb3NlRGF0YWJhc2UoKSk7XHJcblxyXG4gIHRlc3QoXCJjcmVhdGUgZXZlbnRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZXZlbnREYXRhOiBJRXZlbnQgPSB7XHJcbiAgICAgIG5hbWU6IFwiVGVzdCBFdmVudFwiLFxyXG4gICAgICBjcmVhdG9yOiBuZXcgVHlwZXMuT2JqZWN0SWQoKSxcclxuICAgICAgZGVzY3JpcHRpb246IFwiQSB0ZXN0IGV2ZW50XCIsXHJcbiAgICAgIHByaWNlOiAxMCxcclxuICAgICAgZGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgYWRkcmVzczogYSxcclxuICAgICAgY2F0ZWdvcnk6IFtjXSxcclxuICAgICAgY2hhdDogbmV3IFR5cGVzLk9iamVjdElkKCksXHJcbiAgICAgIHBhcnRpY2lwYW50czogW10sXHJcbiAgICB9O1xyXG4gICAgY29uc3QgY3JlYXRlZEV2ZW50ID0gYXdhaXQgRXZlbnQuY3JlYXRlKGV2ZW50RGF0YSk7XHJcbiAgICBleHBlY3QoY3JlYXRlZEV2ZW50KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KGNyZWF0ZWRFdmVudC5uYW1lKS50b0JlKGV2ZW50RGF0YS5uYW1lKTtcclxuICAgIGV4cGVjdChjcmVhdGVkRXZlbnQuY3JlYXRvcikudG9CZShldmVudERhdGEuY3JlYXRvcik7XHJcbiAgICBleHBlY3QoY3JlYXRlZEV2ZW50LmRlc2NyaXB0aW9uKS50b0JlKGV2ZW50RGF0YS5kZXNjcmlwdGlvbik7XHJcbiAgICBleHBlY3QoY3JlYXRlZEV2ZW50LnByaWNlKS50b0JlKGV2ZW50RGF0YS5wcmljZSk7XHJcbiAgICBleHBlY3QoY3JlYXRlZEV2ZW50LmRhdGUpLnRvQmUoZXZlbnREYXRhLmRhdGUpO1xyXG4gICAgZXhwZWN0KGNyZWF0ZWRFdmVudC5hZGRyZXNzKS50b01hdGNoT2JqZWN0KGEpO1xyXG4gICAgZXhwZWN0KGNyZWF0ZWRFdmVudC5jYXRlZ29yeS5tYXAoYyA9PiBjLm5hbWUpKS50b0NvbnRhaW4oXCJIb2JieXNcIik7XHJcbiAgICBleHBlY3QoY3JlYXRlZEV2ZW50LmNoYXQpLnRvQmUoZXZlbnREYXRhLmNoYXQpO1xyXG4gICAgZXhwZWN0KGNyZWF0ZWRFdmVudC5wYXJ0aWNpcGFudHMpLnRvU3RyaWN0RXF1YWwoZXZlbnREYXRhLnBhcnRpY2lwYW50cyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJlbXB0eSBldmVudGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZXZlbnREYXRhOiBJRXZlbnQgPSB7XHJcbiAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgIGNyZWF0b3I6IG5ldyBUeXBlcy5PYmplY3RJZCgpLFxyXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgcHJpY2U6IDAsXHJcbiAgICAgIGRhdGU6IHVuZGVmaW5lZCxcclxuICAgICAgYWRkcmVzczogdW5kZWZpbmVkLFxyXG4gICAgICBjYXRlZ29yeTogW10sXHJcbiAgICAgIGNoYXQ6IG5ldyBUeXBlcy5PYmplY3RJZCgpLFxyXG4gICAgICBwYXJ0aWNpcGFudHM6IFtdLFxyXG4gICAgfTtcclxuICAgIGF3YWl0IGV4cGVjdChFdmVudC5jcmVhdGUoZXZlbnREYXRhKSkucmVqZWN0cy50b1Rocm93KCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJuZWdhdGl2ZSBwcmljZVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBldmVudERhdGE6IElFdmVudCA9IHtcclxuICAgICAgbmFtZTogXCJUZXN0IEV2ZW50XCIsXHJcbiAgICAgIGNyZWF0b3I6IG5ldyBUeXBlcy5PYmplY3RJZCgpLFxyXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHRlc3QgZXZlbnRcIixcclxuICAgICAgcHJpY2U6IC0xLFxyXG4gICAgICBkYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICBhZGRyZXNzOiBhLFxyXG4gICAgICBjYXRlZ29yeTogW2NdLFxyXG4gICAgICBjaGF0OiBuZXcgVHlwZXMuT2JqZWN0SWQoKSxcclxuICAgICAgcGFydGljaXBhbnRzOiBbXSxcclxuICAgIH07XHJcbiAgICBhd2FpdCBleHBlY3QoRXZlbnQuY3JlYXRlKGV2ZW50RGF0YSkpLnJlamVjdHMudG9UaHJvdygpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9