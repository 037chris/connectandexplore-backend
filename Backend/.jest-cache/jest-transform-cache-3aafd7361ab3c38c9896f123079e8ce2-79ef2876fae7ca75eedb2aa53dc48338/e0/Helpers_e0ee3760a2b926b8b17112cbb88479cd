a2dff73585e7bbab1ee87fdc8329f4b7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const express_validator_1 = require("express-validator");
const validateIfPresent = (field, validators) => {
    return (req, res, next) => {
        // Check if the field exists in the request body and has a value
        // && req.body[field] !== ""
        if (req.body[field] !== undefined) {
            return validators(req, res, next);
        }
        // If the field is absent or empty, skip the validation
        return next();
    };
};
// Validation middleware
exports.validate = [
    validateIfPresent("email", (0, express_validator_1.body)("email").isEmail()),
    validateIfPresent("name.first", (0, express_validator_1.body)("name.first").isString()),
    validateIfPresent("name.last", (0, express_validator_1.body)("name.last").isString()),
    validateIfPresent("password", (0, express_validator_1.body)("password").isStrongPassword()),
    validateIfPresent("isAdministrator", (0, express_validator_1.body)("isAdministrator").isBoolean()),
    //validateIfPresent("oldPassword", body("oldPassword").isStrongPassword()),
    validateIfPresent("address.street", (0, express_validator_1.body)("address.street").isString()),
    validateIfPresent("address.houseNumber", (0, express_validator_1.body)("address.houseNumber")
        .isNumeric()
        .withMessage("houseNumber is required.")),
    validateIfPresent("address.postalCode", (0, express_validator_1.body)("address.postalCode")
        .isNumeric()
        .withMessage("Postal code is required.")),
    validateIfPresent("address.city", (0, express_validator_1.body)("address.city").isString().withMessage("City is required.")),
    validateIfPresent("address.country", (0, express_validator_1.body)("address.country").isString().withMessage("Country is required.")),
    validateIfPresent("address.stateOrRegion", (0, express_validator_1.body)("address.stateOrRegion")
        .isString()
        .withMessage("invalid State or Region.")),
    validateIfPresent("address.appartmentNumber", (0, express_validator_1.body)("address.appartmentNumber")
        .isString()
        .withMessage("invalid Appartmentnumber.")),
    validateIfPresent("profilePicture", (0, express_validator_1.body)("profilePicture").isString()),
    validateIfPresent("birthDate", (0, express_validator_1.body)("birthDate").isString()),
    validateIfPresent("gender", (0, express_validator_1.body)("gender").isString()),
    validateIfPresent("socialMediaUrls.facebook", (0, express_validator_1.body)("socialMediaUrls.facebook").isString()),
    validateIfPresent('socialMediaUrls.instagram"', (0, express_validator_1.body)("socialMediaUrls.instagram").isString()),
];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXHV0aWxzXFxIZWxwZXJzLnRzIiwibWFwcGluZ3MiOiI7OztBQUVBLHlEQUEyRDtBQUUzRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsS0FBYSxFQUFFLFVBQWUsRUFBRSxFQUFFO0lBQzNELE9BQU8sQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtRQUN6RCxnRUFBZ0U7UUFDaEUsNEJBQTRCO1FBQzVCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNsQyxPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFDRCx1REFBdUQ7UUFDdkQsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRix3QkFBd0I7QUFDWCxRQUFBLFFBQVEsR0FBRztJQUN0QixpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBQSx3QkFBSSxFQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25ELGlCQUFpQixDQUFDLFlBQVksRUFBRSxJQUFBLHdCQUFJLEVBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUQsaUJBQWlCLENBQUMsV0FBVyxFQUFFLElBQUEsd0JBQUksRUFBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1RCxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBQSx3QkFBSSxFQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDbEUsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsSUFBQSx3QkFBSSxFQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFekUsMkVBQTJFO0lBQzNFLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLElBQUEsd0JBQUksRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RFLGlCQUFpQixDQUNmLHFCQUFxQixFQUNyQixJQUFBLHdCQUFJLEVBQUMscUJBQXFCLENBQUM7U0FDeEIsU0FBUyxFQUFFO1NBQ1gsV0FBVyxDQUFDLDBCQUEwQixDQUFDLENBQzNDO0lBQ0QsaUJBQWlCLENBQ2Ysb0JBQW9CLEVBQ3BCLElBQUEsd0JBQUksRUFBQyxvQkFBb0IsQ0FBQztTQUN2QixTQUFTLEVBQUU7U0FDWCxXQUFXLENBQUMsMEJBQTBCLENBQUMsQ0FDM0M7SUFDRCxpQkFBaUIsQ0FDZixjQUFjLEVBQ2QsSUFBQSx3QkFBSSxFQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNqRTtJQUNELGlCQUFpQixDQUNmLGlCQUFpQixFQUNqQixJQUFBLHdCQUFJLEVBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FDdkU7SUFDRCxpQkFBaUIsQ0FDZix1QkFBdUIsRUFDdkIsSUFBQSx3QkFBSSxFQUFDLHVCQUF1QixDQUFDO1NBQzFCLFFBQVEsRUFBRTtTQUNWLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxDQUMzQztJQUNELGlCQUFpQixDQUNmLDBCQUEwQixFQUMxQixJQUFBLHdCQUFJLEVBQUMsMEJBQTBCLENBQUM7U0FDN0IsUUFBUSxFQUFFO1NBQ1YsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQzVDO0lBQ0QsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsSUFBQSx3QkFBSSxFQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEUsaUJBQWlCLENBQUMsV0FBVyxFQUFFLElBQUEsd0JBQUksRUFBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1RCxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBQSx3QkFBSSxFQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RELGlCQUFpQixDQUNmLDBCQUEwQixFQUMxQixJQUFBLHdCQUFJLEVBQUMsMEJBQTBCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDNUM7SUFDRCxpQkFBaUIsQ0FDZiw0QkFBNEIsRUFDNUIsSUFBQSx3QkFBSSxFQUFDLDJCQUEyQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQzdDO0NBQ0YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG5hY2V1XFxPbmVEcml2ZVxcRGVza3RvcFxcU3R1ZGl1bVxcNSBTZW1lc3RlclxcUHJvamVrdFxcY29ubmVjdGFuZGV4cGxvcmVcXEJhY2tlbmRcXHNyY1xcdXRpbHNcXEhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVVzZXIgfSBmcm9tIFwiLi4vbW9kZWwvVXNlck1vZGVsXCI7XHJcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgeyB2YWxpZGF0aW9uUmVzdWx0LCBib2R5IH0gZnJvbSBcImV4cHJlc3MtdmFsaWRhdG9yXCI7XHJcblxyXG5jb25zdCB2YWxpZGF0ZUlmUHJlc2VudCA9IChmaWVsZDogc3RyaW5nLCB2YWxpZGF0b3JzOiBhbnkpID0+IHtcclxuICByZXR1cm4gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgZmllbGQgZXhpc3RzIGluIHRoZSByZXF1ZXN0IGJvZHkgYW5kIGhhcyBhIHZhbHVlXHJcbiAgICAvLyAmJiByZXEuYm9keVtmaWVsZF0gIT09IFwiXCJcclxuICAgIGlmIChyZXEuYm9keVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdmFsaWRhdG9ycyhyZXEsIHJlcywgbmV4dCk7XHJcbiAgICB9XHJcbiAgICAvLyBJZiB0aGUgZmllbGQgaXMgYWJzZW50IG9yIGVtcHR5LCBza2lwIHRoZSB2YWxpZGF0aW9uXHJcbiAgICByZXR1cm4gbmV4dCgpO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyBWYWxpZGF0aW9uIG1pZGRsZXdhcmVcclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlID0gW1xyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwiZW1haWxcIiwgYm9keShcImVtYWlsXCIpLmlzRW1haWwoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJuYW1lLmZpcnN0XCIsIGJvZHkoXCJuYW1lLmZpcnN0XCIpLmlzU3RyaW5nKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwibmFtZS5sYXN0XCIsIGJvZHkoXCJuYW1lLmxhc3RcIikuaXNTdHJpbmcoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXCJwYXNzd29yZFwiLCBib2R5KFwicGFzc3dvcmRcIikuaXNTdHJvbmdQYXNzd29yZCgpKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcImlzQWRtaW5pc3RyYXRvclwiLCBib2R5KFwiaXNBZG1pbmlzdHJhdG9yXCIpLmlzQm9vbGVhbigpKSxcclxuXHJcbiAgLy92YWxpZGF0ZUlmUHJlc2VudChcIm9sZFBhc3N3b3JkXCIsIGJvZHkoXCJvbGRQYXNzd29yZFwiKS5pc1N0cm9uZ1Bhc3N3b3JkKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwiYWRkcmVzcy5zdHJlZXRcIiwgYm9keShcImFkZHJlc3Muc3RyZWV0XCIpLmlzU3RyaW5nKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFxyXG4gICAgXCJhZGRyZXNzLmhvdXNlTnVtYmVyXCIsXHJcbiAgICBib2R5KFwiYWRkcmVzcy5ob3VzZU51bWJlclwiKVxyXG4gICAgICAuaXNOdW1lcmljKClcclxuICAgICAgLndpdGhNZXNzYWdlKFwiaG91c2VOdW1iZXIgaXMgcmVxdWlyZWQuXCIpXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgIFwiYWRkcmVzcy5wb3N0YWxDb2RlXCIsXHJcbiAgICBib2R5KFwiYWRkcmVzcy5wb3N0YWxDb2RlXCIpXHJcbiAgICAgIC5pc051bWVyaWMoKVxyXG4gICAgICAud2l0aE1lc3NhZ2UoXCJQb3N0YWwgY29kZSBpcyByZXF1aXJlZC5cIilcclxuICApLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFxyXG4gICAgXCJhZGRyZXNzLmNpdHlcIixcclxuICAgIGJvZHkoXCJhZGRyZXNzLmNpdHlcIikuaXNTdHJpbmcoKS53aXRoTWVzc2FnZShcIkNpdHkgaXMgcmVxdWlyZWQuXCIpXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgIFwiYWRkcmVzcy5jb3VudHJ5XCIsXHJcbiAgICBib2R5KFwiYWRkcmVzcy5jb3VudHJ5XCIpLmlzU3RyaW5nKCkud2l0aE1lc3NhZ2UoXCJDb3VudHJ5IGlzIHJlcXVpcmVkLlwiKVxyXG4gICksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXHJcbiAgICBcImFkZHJlc3Muc3RhdGVPclJlZ2lvblwiLFxyXG4gICAgYm9keShcImFkZHJlc3Muc3RhdGVPclJlZ2lvblwiKVxyXG4gICAgICAuaXNTdHJpbmcoKVxyXG4gICAgICAud2l0aE1lc3NhZ2UoXCJpbnZhbGlkIFN0YXRlIG9yIFJlZ2lvbi5cIiksXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcclxuICAgIFwiYWRkcmVzcy5hcHBhcnRtZW50TnVtYmVyXCIsXHJcbiAgICBib2R5KFwiYWRkcmVzcy5hcHBhcnRtZW50TnVtYmVyXCIpXHJcbiAgICAgIC5pc1N0cmluZygpXHJcbiAgICAgIC53aXRoTWVzc2FnZShcImludmFsaWQgQXBwYXJ0bWVudG51bWJlci5cIiksXHJcbiAgKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcInByb2ZpbGVQaWN0dXJlXCIsIGJvZHkoXCJwcm9maWxlUGljdHVyZVwiKS5pc1N0cmluZygpKSxcclxuICB2YWxpZGF0ZUlmUHJlc2VudChcImJpcnRoRGF0ZVwiLCBib2R5KFwiYmlydGhEYXRlXCIpLmlzU3RyaW5nKCkpLFxyXG4gIHZhbGlkYXRlSWZQcmVzZW50KFwiZ2VuZGVyXCIsIGJvZHkoXCJnZW5kZXJcIikuaXNTdHJpbmcoKSksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXHJcbiAgICBcInNvY2lhbE1lZGlhVXJscy5mYWNlYm9va1wiLFxyXG4gICAgYm9keShcInNvY2lhbE1lZGlhVXJscy5mYWNlYm9va1wiKS5pc1N0cmluZygpLFxyXG4gICksXHJcbiAgdmFsaWRhdGVJZlByZXNlbnQoXHJcbiAgICAnc29jaWFsTWVkaWFVcmxzLmluc3RhZ3JhbVwiJyxcclxuICAgIGJvZHkoXCJzb2NpYWxNZWRpYVVybHMuaW5zdGFncmFtXCIpLmlzU3RyaW5nKCksXHJcbiAgKSxcclxuXTtcclxuIl0sInZlcnNpb24iOjN9