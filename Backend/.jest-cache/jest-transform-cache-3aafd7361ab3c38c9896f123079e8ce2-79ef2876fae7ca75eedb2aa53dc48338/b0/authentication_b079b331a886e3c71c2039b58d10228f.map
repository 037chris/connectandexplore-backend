{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\authentication.ts","mappings":";;;AACA,uDAAmD;AAiBnD;;;GAGG;AACI,KAAK,UAAU,sBAAsB,CAC1C,GAAY,EACZ,GAAa,EACb,IAAkB;IAElB,IAAI;QACF,MAAM,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAChD,IAAI,aAAa,IAAI,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACxD,MAAM,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sBAAS,EAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE;gBACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;aACjD;YACD,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,EAAE,CAAC;SACR;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,GAAG,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC;SAC7C;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,SAAS,CAAC,kBAAkB,EAAE;YAChC,QAAQ;YACR,aAAa;YACb,uBAAuB;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,CAAC;KACX;AACH,CAAC;AA/BD,wDA+BC;AAED;;;;GAIG;AACI,KAAK,UAAU,sBAAsB,CAC1C,GAAY,EACZ,GAAa,EACb,IAAkB;IAElB,MAAM,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;IAChD,IAAI,aAAa,EAAE;QACjB,IAAI;YACF,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sBAAS,EAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE;gBACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;aACjD;YACD,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,EAAE,CAAC;SACR;QAAC,OAAO,GAAG,EAAE;YACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,CAAC;SACX;KACF;SAAM;QACL,IAAI,EAAE,CAAC;KACR;AACH,CAAC;AAxBD,wDAwBC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\authentication.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { verifyJWT } from \"../services/JWTService\";\r\n\r\ndeclare global {\r\n  namespace Express {\r\n    /**\r\n     * Wir erweitern das Interface `Request` um die Felder `userId` und `role`.\r\n     */\r\n    export interface Request {\r\n      /**\r\n       * Mongo-ID of currently logged in user; or undefined, if user is a guest.\r\n       */\r\n      userId?: string;\r\n      role: \"u\" | \"a\";\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Prüft Authentifizierung und schreibt `userId` mit Mongo-ID des Users und `role` mit Kürzel der Rolle in den Request.\r\n * Falls Authentifizierung fehlschlägt, wird ein Fehler (401) erzeugt.\r\n */\r\nexport async function requiresAuthentication(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) {\r\n  try {\r\n    const authorization = req.headers.authorization;\r\n    if (authorization && authorization.startsWith(\"Bearer \")) {\r\n      const token = authorization.substring(\"Bearer \".length);\r\n      const { userId, role } = verifyJWT(token);\r\n      if (!userId || !role) {\r\n        res.status(401);\r\n        return next(new Error(\"Authentication Failed\"));\r\n      }\r\n      req.userId = userId;\r\n      req.role = role;\r\n      next();\r\n    } else {\r\n      res.status(401);\r\n      res.setHeader(\"WWW-Authenticate\", [\"Bearer\", 'realm=\"app\"']);\r\n      next(new Error(\"authentication required!\"));\r\n    }\r\n  } catch (err) {\r\n    res.status(401);\r\n    res.setHeader(\"WWW-Authenticate\", [\r\n      \"Bearer\",\r\n      'realm=\"app\"',\r\n      'error=\"invalid_token\"',\r\n    ]);\r\n    next(err);\r\n  }\r\n}\r\n\r\n/**\r\n * Prüft Authentifizierung und schreibt `userId` mit Mongo-ID des Users und `role` mit Kürzel der Rolle in den Request.\r\n * Falls kein JSON-Web-Token im Request-Header vorhanden ist, wird kein Fehler erzeugt (und auch nichts in den Request geschrieben).\r\n * Falls Authentifizierung fehlschlägt, wird ein Fehler (401) erzeugt.\r\n */\r\nexport async function optionalAuthentication(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) {\r\n  const authorization = req.headers.authorization;\r\n  if (authorization) {\r\n    try {\r\n      const token = authorization.split(\" \")[1];\r\n      const { userId, role } = verifyJWT(token);\r\n      if (!userId || !role) {\r\n        res.status(401);\r\n        return next(new Error(\"Authentication Failed\"));\r\n      }\r\n      req.userId = userId;\r\n      req.role = role;\r\n      next();\r\n    } catch (err) {\r\n      res.status(401);\r\n      next(err);\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n}\r\n"],"version":3}