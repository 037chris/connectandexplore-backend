{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\model\\UserModel.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\model\\UserModel.ts"],"sourcesContent":["import mongoose, { Model, model, Schema, Query } from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport interface IUser {\r\n  email: string;\r\n  name: {\r\n    first: string;\r\n    last: string;\r\n  };\r\n  password: string;\r\n  isAdministrator: Boolean;\r\n  address: IAddress;\r\n  profilePicture?: string;\r\n  birthDate: Date;\r\n  gender: string;\r\n  socialMediaUrls?: {\r\n    facebook?: string;\r\n    instagram?: string;\r\n  };\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface IAddress {\r\n  street: String;\r\n  houseNumber: String;\r\n  apartmentNumber?: String;\r\n  postalCode: String;\r\n  city: String;\r\n  stateOrRegion?: String;\r\n  country: String;\r\n}\r\n\r\nexport enum userRole {\r\n  User = \"u\",\r\n  Admin = \"a\",\r\n}\r\ninterface IUserMethods {\r\n  isCorrectPassword(password: string): Promise<boolean>;\r\n}\r\ntype UserModel = Model<IUser, {}, IUserMethods>;\r\n\r\n/**\r\n * Adressen werden später in das UserSchema eingefügt und als teil eines Users in mongoDB gespeichert\r\n */\r\nexport const addressSchema = new Schema({\r\n  street: { type: String, required: true },\r\n  houseNumber: { type: String, required: true },\r\n  apartmentNumber: String,\r\n  postalCode: { type: String, required: true },\r\n  city: { type: String, required: true },\r\n  stateOrRegion: String,\r\n  country: { type: String, required: true },\r\n});\r\n\r\nconst userSchema = new Schema<IUser, UserModel>({\r\n  email: { type: String, required: true, unique: true },\r\n  name: {\r\n    first: { type: String, required: true },\r\n    last: { type: String, required: true },\r\n  },\r\n  password: { type: String, required: true },\r\n  isAdministrator: { type: Boolean, default: false },\r\n  address: addressSchema,\r\n  profilePicture: String,\r\n  birthDate: { type: Date, required: true },\r\n  gender: { type: String, required: true },\r\n  socialMediaUrls: {\r\n    facebook: String,\r\n    instagram: String,\r\n  },\r\n  isActive: { type: Boolean, default: true },\r\n});\r\n\r\nuserSchema.pre(\"save\", async function () {\r\n  if (this.isModified(\"password\")) {\r\n    const hashedPassword = await bcrypt.hash(this.password, 10);\r\n    this.password = hashedPassword;\r\n  }\r\n});\r\n\r\nuserSchema.pre(\r\n  \"updateOne\",\r\n  { document: false, query: true },\r\n  async function () {\r\n    const update = this.getUpdate() as\r\n      | (Query<any, IUser> & { password?: string })\r\n      | null;\r\n    if (update?.password != null) {\r\n      const hashedPassword = await bcrypt.hash(update.password, 10);\r\n      update.password = hashedPassword;\r\n    }\r\n  },\r\n);\r\n\r\nuserSchema.method(\r\n  \"isCorrectPassword\",\r\n  async function (password: string): Promise<boolean> {\r\n    const isPW = await bcrypt.compare(password, this.password);\r\n    return isPW;\r\n  },\r\n);\r\n\r\nexport const User = model<IUser, UserModel>(\"User\", userSchema);\r\n"],"version":3}