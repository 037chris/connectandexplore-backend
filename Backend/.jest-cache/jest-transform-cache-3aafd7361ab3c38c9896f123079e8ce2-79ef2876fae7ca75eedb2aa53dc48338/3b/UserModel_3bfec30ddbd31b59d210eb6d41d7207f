b0c122c5e0f578f2d1424be7b513963e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.addressSchema = exports.userRole = void 0;
const mongoose_1 = require("mongoose");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
var userRole;
(function (userRole) {
    userRole["User"] = "u";
    userRole["Admin"] = "a";
})(userRole || (exports.userRole = userRole = {}));
/**
 * Adressen werden später in das UserSchema eingefügt und als teil eines Users in mongoDB gespeichert
 */
exports.addressSchema = new mongoose_1.Schema({
    street: { type: String, required: true },
    houseNumber: { type: String, required: true },
    apartmentNumber: String,
    postalCode: { type: String, required: true },
    city: { type: String, required: true },
    stateOrRegion: String,
    country: { type: String, required: true },
});
const userSchema = new mongoose_1.Schema({
    email: { type: String, required: true, unique: true },
    name: {
        first: { type: String, required: true },
        last: { type: String, required: true },
    },
    password: { type: String, required: true },
    isAdministrator: { type: Boolean, default: false },
    address: exports.addressSchema,
    profilePicture: String,
    birthDate: { type: Date, required: true },
    gender: { type: String, required: true },
    socialMediaUrls: {
        facebook: String,
        instagram: String,
    },
    isActive: { type: Boolean, default: true },
});
userSchema.pre("save", async function () {
    if (this.isModified("password")) {
        const hashedPassword = await bcryptjs_1.default.hash(this.password, 10);
        this.password = hashedPassword;
    }
});
userSchema.pre("updateOne", { document: false, query: true }, async function () {
    const update = this.getUpdate();
    if ((update === null || update === void 0 ? void 0 : update.password) != null) {
        const hashedPassword = await bcryptjs_1.default.hash(update.password, 10);
        update.password = hashedPassword;
    }
});
userSchema.method("isCorrectPassword", async function (password) {
    const isPW = await bcryptjs_1.default.compare(password, this.password);
    return isPW;
});
exports.User = (0, mongoose_1.model)("User", userSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXG1vZGVsXFxVc2VyTW9kZWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQWlFO0FBQ2pFLHdEQUE4QjtBQStCOUIsSUFBWSxRQUdYO0FBSEQsV0FBWSxRQUFRO0lBQ2xCLHNCQUFVLENBQUE7SUFDVix1QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLFFBQVEsd0JBQVIsUUFBUSxRQUduQjtBQU1EOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3RDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN4QyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDN0MsZUFBZSxFQUFFLE1BQU07SUFDdkIsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzVDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN0QyxhQUFhLEVBQUUsTUFBTTtJQUNyQixPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBTSxDQUFtQjtJQUM5QyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNyRCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7UUFDdkMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0tBQ3ZDO0lBQ0QsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQzFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtJQUNsRCxPQUFPLEVBQUUscUJBQWE7SUFDdEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ3pDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUN4QyxlQUFlLEVBQUU7UUFDZixRQUFRLEVBQUUsTUFBTTtRQUNoQixTQUFTLEVBQUUsTUFBTTtLQUNsQjtJQUNELFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtDQUMzQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLO0lBQzFCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUMvQixNQUFNLGNBQWMsR0FBRyxNQUFNLGtCQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7S0FDaEM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxHQUFHLENBQ1osV0FBVyxFQUNYLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQ2hDLEtBQUs7SUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUVyQixDQUFDO0lBQ1QsSUFBSSxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRLEtBQUksSUFBSSxFQUFFO1FBQzVCLE1BQU0sY0FBYyxHQUFHLE1BQU0sa0JBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztLQUNsQztBQUNILENBQUMsQ0FDRixDQUFDO0FBRUYsVUFBVSxDQUFDLE1BQU0sQ0FDZixtQkFBbUIsRUFDbkIsS0FBSyxXQUFXLFFBQWdCO0lBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sa0JBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FDRixDQUFDO0FBRVcsUUFBQSxJQUFJLEdBQUcsSUFBQSxnQkFBSyxFQUFtQixNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXG1vZGVsXFxVc2VyTW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlLCB7IE1vZGVsLCBtb2RlbCwgU2NoZW1hLCBRdWVyeSB9IGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgYmNyeXB0IGZyb20gXCJiY3J5cHRqc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVXNlciB7XHJcbiAgZW1haWw6IHN0cmluZztcclxuICBuYW1lOiB7XHJcbiAgICBmaXJzdDogc3RyaW5nO1xyXG4gICAgbGFzdDogc3RyaW5nO1xyXG4gIH07XHJcbiAgcGFzc3dvcmQ6IHN0cmluZztcclxuICBpc0FkbWluaXN0cmF0b3I6IEJvb2xlYW47XHJcbiAgYWRkcmVzczogSUFkZHJlc3M7XHJcbiAgcHJvZmlsZVBpY3R1cmU/OiBzdHJpbmc7XHJcbiAgYmlydGhEYXRlOiBEYXRlO1xyXG4gIGdlbmRlcjogc3RyaW5nO1xyXG4gIHNvY2lhbE1lZGlhVXJscz86IHtcclxuICAgIGZhY2Vib29rPzogc3RyaW5nO1xyXG4gICAgaW5zdGFncmFtPzogc3RyaW5nO1xyXG4gIH07XHJcbiAgaXNBY3RpdmU6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFkZHJlc3Mge1xyXG4gIHN0cmVldDogU3RyaW5nO1xyXG4gIGhvdXNlTnVtYmVyOiBTdHJpbmc7XHJcbiAgYXBhcnRtZW50TnVtYmVyPzogU3RyaW5nO1xyXG4gIHBvc3RhbENvZGU6IFN0cmluZztcclxuICBjaXR5OiBTdHJpbmc7XHJcbiAgc3RhdGVPclJlZ2lvbj86IFN0cmluZztcclxuICBjb3VudHJ5OiBTdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIHVzZXJSb2xlIHtcclxuICBVc2VyID0gXCJ1XCIsXHJcbiAgQWRtaW4gPSBcImFcIixcclxufVxyXG5pbnRlcmZhY2UgSVVzZXJNZXRob2RzIHtcclxuICBpc0NvcnJlY3RQYXNzd29yZChwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcclxufVxyXG50eXBlIFVzZXJNb2RlbCA9IE1vZGVsPElVc2VyLCB7fSwgSVVzZXJNZXRob2RzPjtcclxuXHJcbi8qKlxyXG4gKiBBZHJlc3NlbiB3ZXJkZW4gc3DDpHRlciBpbiBkYXMgVXNlclNjaGVtYSBlaW5nZWbDvGd0IHVuZCBhbHMgdGVpbCBlaW5lcyBVc2VycyBpbiBtb25nb0RCIGdlc3BlaWNoZXJ0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWRkcmVzc1NjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gIHN0cmVldDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgaG91c2VOdW1iZXI6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIGFwYXJ0bWVudE51bWJlcjogU3RyaW5nLFxyXG4gIHBvc3RhbENvZGU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIGNpdHk6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIHN0YXRlT3JSZWdpb246IFN0cmluZyxcclxuICBjb3VudHJ5OiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxufSk7XHJcblxyXG5jb25zdCB1c2VyU2NoZW1hID0gbmV3IFNjaGVtYTxJVXNlciwgVXNlck1vZGVsPih7XHJcbiAgZW1haWw6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSwgdW5pcXVlOiB0cnVlIH0sXHJcbiAgbmFtZToge1xyXG4gICAgZmlyc3Q6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gICAgbGFzdDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgfSxcclxuICBwYXNzd29yZDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgaXNBZG1pbmlzdHJhdG9yOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXHJcbiAgYWRkcmVzczogYWRkcmVzc1NjaGVtYSxcclxuICBwcm9maWxlUGljdHVyZTogU3RyaW5nLFxyXG4gIGJpcnRoRGF0ZTogeyB0eXBlOiBEYXRlLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIGdlbmRlcjogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgc29jaWFsTWVkaWFVcmxzOiB7XHJcbiAgICBmYWNlYm9vazogU3RyaW5nLFxyXG4gICAgaW5zdGFncmFtOiBTdHJpbmcsXHJcbiAgfSxcclxuICBpc0FjdGl2ZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0sXHJcbn0pO1xyXG5cclxudXNlclNjaGVtYS5wcmUoXCJzYXZlXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5pc01vZGlmaWVkKFwicGFzc3dvcmRcIikpIHtcclxuICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2godGhpcy5wYXNzd29yZCwgMTApO1xyXG4gICAgdGhpcy5wYXNzd29yZCA9IGhhc2hlZFBhc3N3b3JkO1xyXG4gIH1cclxufSk7XHJcblxyXG51c2VyU2NoZW1hLnByZShcclxuICBcInVwZGF0ZU9uZVwiLFxyXG4gIHsgZG9jdW1lbnQ6IGZhbHNlLCBxdWVyeTogdHJ1ZSB9LFxyXG4gIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMuZ2V0VXBkYXRlKCkgYXNcclxuICAgICAgfCAoUXVlcnk8YW55LCBJVXNlcj4gJiB7IHBhc3N3b3JkPzogc3RyaW5nIH0pXHJcbiAgICAgIHwgbnVsbDtcclxuICAgIGlmICh1cGRhdGU/LnBhc3N3b3JkICE9IG51bGwpIHtcclxuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaCh1cGRhdGUucGFzc3dvcmQsIDEwKTtcclxuICAgICAgdXBkYXRlLnBhc3N3b3JkID0gaGFzaGVkUGFzc3dvcmQ7XHJcbiAgICB9XHJcbiAgfSxcclxuKTtcclxuXHJcbnVzZXJTY2hlbWEubWV0aG9kKFxyXG4gIFwiaXNDb3JyZWN0UGFzc3dvcmRcIixcclxuICBhc3luYyBmdW5jdGlvbiAocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgaXNQVyA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkKTtcclxuICAgIHJldHVybiBpc1BXO1xyXG4gIH0sXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgVXNlciA9IG1vZGVsPElVc2VyLCBVc2VyTW9kZWw+KFwiVXNlclwiLCB1c2VyU2NoZW1hKTtcclxuIl0sInZlcnNpb24iOjN9