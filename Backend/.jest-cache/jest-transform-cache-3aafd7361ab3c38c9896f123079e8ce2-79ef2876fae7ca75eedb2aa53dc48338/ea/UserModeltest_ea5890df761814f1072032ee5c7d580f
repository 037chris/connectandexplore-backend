7213788e8a4d92a7bf3cd9658b979cf2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("../../database/db");
const UserModel_1 = require("../../src/model/UserModel");
const a = {
    street: "Street",
    houseNumber: "1",
    postalCode: "12345",
    city: "Berlin",
    country: "Germany",
};
let u = {
    email: "John@doe.com",
    name: {
        first: "John",
        last: "Doe",
    },
    password: "123",
    isAdministrator: true,
    address: a,
    birthDate: new Date(),
    gender: "male",
    isActive: true,
    profilePicture: "picture1",
    socialMediaUrls: {
        facebook: "facebook",
        instagram: "instagram",
    },
};
describe("userModel test", () => {
    beforeAll(async () => await (0, db_1.connect)());
    afterEach(async () => await (0, db_1.clearDatabase)());
    afterAll(async () => await (0, db_1.closeDatabase)());
    test("create User", async () => {
        const user = await UserModel_1.User.create(u);
        expect(user.id).toBeDefined();
        expect(user.name.first).toBe(u.name.first);
        expect(user.name.last).toBe(u.name.last);
        expect(user.email).toBe(u.email);
        expect(user.password).not.toBe(u.password);
        expect(user.password).toBeDefined();
        expect(await user.isCorrectPassword("123")).toBeTruthy();
        expect(user.address).toMatchObject(a);
        expect(user.birthDate).toBe(u.birthDate);
        expect(user.gender).toBe(u.gender);
        expect(user.isActive).toBeTruthy();
        expect(user.profilePicture).toBe(u.profilePicture);
        expect(user.socialMediaUrls).toMatchObject(u.socialMediaUrls);
    });
    test("updated user password middleware", async () => {
        const user = await UserModel_1.User.create(u);
        user.password = "456";
        user.email = "John@some-host.de";
        await user.save();
        const res = await UserModel_1.User.findById(user.id);
        expect(res.password).not.toBe("456");
        expect(res.password).not.toBe("123");
        expect(res.password).toBeDefined();
        expect(await res.isCorrectPassword("456")).toBeTruthy();
        expect(res.email).toBe("John@some-host.de");
        expect(await UserModel_1.User.findOne({ email: "John@doe.com" })).toBeNull();
    });
    test("rejects on duplicate email", async () => {
        await UserModel_1.User.create(u);
        u.name.first = "Jane";
        await expect(UserModel_1.User.create(u)).rejects.toThrow();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFx0ZXN0c1xcbW9kZWxcXFVzZXJNb2RlbC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsMENBQTBFO0FBQzFFLHlEQUFrRTtBQUVsRSxNQUFNLENBQUMsR0FBYTtJQUNsQixNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsR0FBRztJQUNoQixVQUFVLEVBQUUsT0FBTztJQUNuQixJQUFJLEVBQUUsUUFBUTtJQUNkLE9BQU8sRUFBRSxTQUFTO0NBQ25CLENBQUM7QUFDRixJQUFJLENBQUMsR0FBVTtJQUNiLEtBQUssRUFBRSxjQUFjO0lBQ3JCLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLEtBQUs7S0FDWjtJQUNELFFBQVEsRUFBRSxLQUFLO0lBQ2YsZUFBZSxFQUFFLElBQUk7SUFDckIsT0FBTyxFQUFFLENBQUM7SUFDVixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7SUFDckIsTUFBTSxFQUFFLE1BQU07SUFDZCxRQUFRLEVBQUUsSUFBSTtJQUNkLGNBQWMsRUFBRSxVQUFVO0lBQzFCLGVBQWUsRUFBRTtRQUNmLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLFNBQVMsRUFBRSxXQUFXO0tBQ3ZCO0NBQ0YsQ0FBQztBQUVGLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFBLFlBQU8sR0FBRSxDQUFDLENBQUM7SUFDdkMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFBLGtCQUFhLEdBQUUsQ0FBQyxDQUFDO0lBQzdDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBQSxrQkFBYSxHQUFFLENBQUMsQ0FBQztJQUU1QyxJQUFJLENBQUMsYUFBYSxFQUFF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LENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUMsTUFBTSxnQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDdEIsTUFBTSxNQUFNLENBQUMsZ0JBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG5hY2V1XFxPbmVEcml2ZVxcRGVza3RvcFxcU3R1ZGl1bVxcNSBTZW1lc3RlclxcUHJvamVrdFxcY29ubmVjdGFuZGV4cGxvcmVcXEJhY2tlbmRcXHRlc3RzXFxtb2RlbFxcVXNlck1vZGVsLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xlYXJEYXRhYmFzZSwgY2xvc2VEYXRhYmFzZSwgY29ubmVjdCB9IGZyb20gXCIuLi8uLi9kYXRhYmFzZS9kYlwiO1xyXG5pbXBvcnQgeyBJQWRkcmVzcywgSVVzZXIsIFVzZXIgfSBmcm9tIFwiLi4vLi4vc3JjL21vZGVsL1VzZXJNb2RlbFwiO1xyXG5cclxuY29uc3QgYTogSUFkZHJlc3MgPSB7XHJcbiAgc3RyZWV0OiBcIlN0cmVldFwiLFxyXG4gIGhvdXNlTnVtYmVyOiBcIjFcIixcclxuICBwb3N0YWxDb2RlOiBcIjEyMzQ1XCIsXHJcbiAgY2l0eTogXCJCZXJsaW5cIixcclxuICBjb3VudHJ5OiBcIkdlcm1hbnlcIixcclxufTtcclxubGV0IHU6IElVc2VyID0ge1xyXG4gIGVtYWlsOiBcIkpvaG5AZG9lLmNvbVwiLFxyXG4gIG5hbWU6IHtcclxuICAgIGZpcnN0OiBcIkpvaG5cIixcclxuICAgIGxhc3Q6IFwiRG9lXCIsXHJcbiAgfSxcclxuICBwYXNzd29yZDogXCIxMjNcIixcclxuICBpc0FkbWluaXN0cmF0b3I6IHRydWUsXHJcbiAgYWRkcmVzczogYSxcclxuICBiaXJ0aERhdGU6IG5ldyBEYXRlKCksXHJcbiAgZ2VuZGVyOiBcIm1hbGVcIixcclxuICBpc0FjdGl2ZTogdHJ1ZSxcclxuICBwcm9maWxlUGljdHVyZTogXCJwaWN0dXJlMVwiLFxyXG4gIHNvY2lhbE1lZGlhVXJsczoge1xyXG4gICAgZmFjZWJvb2s6IFwiZmFjZWJvb2tcIixcclxuICAgIGluc3RhZ3JhbTogXCJpbnN0YWdyYW1cIixcclxuICB9LFxyXG59O1xyXG5cclxuZGVzY3JpYmUoXCJ1c2VyTW9kZWwgdGVzdFwiLCAoKSA9PiB7XHJcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IGF3YWl0IGNvbm5lY3QoKSk7XHJcbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IGF3YWl0IGNsZWFyRGF0YWJhc2UoKSk7XHJcbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4gYXdhaXQgY2xvc2VEYXRhYmFzZSgpKTtcclxuXHJcbiAgdGVzdChcImNyZWF0ZSBVc2VyXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh1KTtcclxuICAgIGV4cGVjdCh1c2VyLmlkKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KHVzZXIubmFtZS5maXJzdCkudG9CZSh1Lm5hbWUuZmlyc3QpO1xyXG4gICAgZXhwZWN0KHVzZXIubmFtZS5sYXN0KS50b0JlKHUubmFtZS5sYXN0KTtcclxuICAgIGV4cGVjdCh1c2VyLmVtYWlsKS50b0JlKHUuZW1haWwpO1xyXG4gICAgZXhwZWN0KHVzZXIucGFzc3dvcmQpLm5vdC50b0JlKHUucGFzc3dvcmQpO1xyXG4gICAgZXhwZWN0KHVzZXIucGFzc3dvcmQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QoYXdhaXQgdXNlci5pc0NvcnJlY3RQYXNzd29yZChcIjEyM1wiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHVzZXIuYWRkcmVzcykudG9NYXRjaE9iamVjdChhKTtcclxuICAgIGV4cGVjdCh1c2VyLmJpcnRoRGF0ZSkudG9CZSh1LmJpcnRoRGF0ZSk7XHJcbiAgICBleHBlY3QodXNlci5nZW5kZXIpLnRvQmUodS5nZW5kZXIpO1xyXG4gICAgZXhwZWN0KHVzZXIuaXNBY3RpdmUpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdCh1c2VyLnByb2ZpbGVQaWN0dXJlKS50b0JlKHUucHJvZmlsZVBpY3R1cmUpO1xyXG4gICAgZXhwZWN0KHVzZXIuc29jaWFsTWVkaWFVcmxzKS50b01hdGNoT2JqZWN0KHUuc29jaWFsTWVkaWFVcmxzKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdChcInVwZGF0ZWQgdXNlciBwYXNzd29yZCBtaWRkbGV3YXJlXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh1KTtcclxuICAgIHVzZXIucGFzc3dvcmQgPSBcIjQ1NlwiO1xyXG4gICAgdXNlci5lbWFpbCA9IFwiSm9obkBzb21lLWhvc3QuZGVcIjtcclxuICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgVXNlci5maW5kQnlJZCh1c2VyLmlkKTtcclxuICAgIGV4cGVjdChyZXMucGFzc3dvcmQpLm5vdC50b0JlKFwiNDU2XCIpO1xyXG4gICAgZXhwZWN0KHJlcy5wYXNzd29yZCkubm90LnRvQmUoXCIxMjNcIik7XHJcbiAgICBleHBlY3QocmVzLnBhc3N3b3JkKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KGF3YWl0IHJlcy5pc0NvcnJlY3RQYXNzd29yZChcIjQ1NlwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHJlcy5lbWFpbCkudG9CZShcIkpvaG5Ac29tZS1ob3N0LmRlXCIpO1xyXG4gICAgZXhwZWN0KGF3YWl0IFVzZXIuZmluZE9uZSh7IGVtYWlsOiBcIkpvaG5AZG9lLmNvbVwiIH0pKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwicmVqZWN0cyBvbiBkdXBsaWNhdGUgZW1haWxcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgVXNlci5jcmVhdGUodSk7XHJcbiAgICB1Lm5hbWUuZmlyc3QgPSBcIkphbmVcIjtcclxuICAgIGF3YWl0IGV4cGVjdChVc2VyLmNyZWF0ZSh1KSkucmVqZWN0cy50b1Rocm93KCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=