{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\UserRoute.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\UserRoute.ts"],"sourcesContent":["import express from \"express\";\r\nimport fs from \"fs\";\r\nimport {\r\n  body,\r\n  check,\r\n  matchedData,\r\n  param,\r\n  validationResult,\r\n} from \"express-validator\";\r\nimport { UserService } from \"../services/UserService\";\r\nimport { upload, deleteProfilePicture } from \"../utils/FileUpload\";\r\nimport { validate } from \"../utils/Helpers\";\r\nimport { requiresAuthentication } from \"./authentication\";\r\nimport { userResource } from \"../Resources\";\r\nconst UserRouter = express.Router();\r\nconst userService = new UserService();\r\n\r\n/**\r\n * @swagger\r\n * /api/users/register:\r\n *   post:\r\n *     summary: Register a new user\r\n *     description: Register a new user with user data and an optional profile picture.\r\n *     tags:\r\n *       - User\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *              type: object\r\n *              properties:\r\n *                profilePicture:\r\n *                  type: string\r\n *                  example: []\r\n *                  format: binary\r\n *                email:\r\n *                  type: string\r\n *                  example: \"John@doe.com\"\r\n *                name[first]:\r\n *                  type: string\r\n *                  example: \"Test\"\r\n *                name[last]:\r\n *                  type: string\r\n *                  example: \"User\"\r\n *                password:\r\n *                  type: string\r\n *                  example: \"12abcAB!\"\r\n *                birthDate:\r\n *                  type: string\r\n *                  example: \"2000-01-01\"\r\n *                gender:\r\n *                  type: string\r\n *                  example: \"Male\"\r\n *                address[street]:\r\n *                  type: string\r\n *                  example: \"123 Test Street\"\r\n *                address[houseNumber]:\r\n *                  type: string\r\n *                  example: \"1\"\r\n *                address[apartmentNumber]:\r\n *                  type: string\r\n *                  example: \"123\"\r\n *                address[postalCode]:\r\n *                  type: string\r\n *                  example: \"12345\"\r\n *                address[city]:\r\n *                  type: string\r\n *                  example: \"Berlin\"\r\n *                address[stateOrRegion]:\r\n *                  type: string\r\n *                  example: \"Berlin\"\r\n *                address[country]:\r\n *                  type: string\r\n *                  example: \"DE\"\r\n *              required:\r\n *                - email\r\n *                - password\r\n *                - gender\r\n *                - birthDate\r\n *                - name[first]\r\n *                - name[last]\r\n *                - address[street]\r\n *                - address[houseNumber]\r\n *                - address[postalCode]\r\n *                - address[city]\r\n *                - address[country]\r\n *     responses:\r\n *       201:\r\n *         description: User registered successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/IUser'\r\n *       409:\r\n *         description: User already exists\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: User already exists\r\n *       500:\r\n *         description: Registration failed\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: Registration failed\r\n */\r\nUserRouter.post(\r\n  \"/register\",\r\n  upload.single(\"profilePicture\"),\r\n  [\r\n    body(\"email\").isEmail(),\r\n    body(\"name.first\")\r\n      .isString()\r\n      .isLength({ min: 3, max: 100 })\r\n      .withMessage(\"First name is required.\"),\r\n    body(\"name.last\")\r\n      .isString()\r\n      .isLength({ min: 3, max: 100 })\r\n      .withMessage(\"Last name is required.\"),\r\n    body(\"password\").isStrongPassword(),\r\n    body(\"isAdministrator\").optional().isBoolean(),\r\n    body(\"address.street\")\r\n      .notEmpty()\r\n      .withMessage(\"Street address is required.\"),\r\n    body(\"address.houseNumber\")\r\n      .notEmpty()\r\n      .withMessage(\"House number is required.\"),\r\n    body(\"address.postalCode\")\r\n      .notEmpty()\r\n      .withMessage(\"Postal code is required.\"),\r\n    body(\"address.city\").notEmpty().withMessage(\"City is required.\"),\r\n    body(\"address.country\").notEmpty().withMessage(\"Country is required.\"),\r\n    body(\"address.stateOrRegion\")\r\n      .optional()\r\n      .isString()\r\n      .withMessage(\"Invalid State or Region.\"),\r\n    body(\"address.apartmentNumber\")\r\n      .optional()\r\n      .isString()\r\n      .withMessage(\"Invalid Apartment number.\"),\r\n    body(\"profilePicture\").optional().isString(),\r\n    body(\"birthDate\").isDate(),\r\n    body(\"gender\").isString().notEmpty(),\r\n    body(\"socialMediaUrls.facebook\").optional().isString(),\r\n    body(\"socialMediaUrls.instagram\").optional().isString(),\r\n  ],\r\n  async (req, res) => {\r\n    try {\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        if (req.file) {\r\n          // Delete the file\r\n          deleteProfilePicture(req.file.path);\r\n        }\r\n        return res.status(400).json({ errors: errors.array() });\r\n      } else {\r\n        if (req.file) {\r\n          req.body.profilePicture = `/uploads/${req.file.filename}`;\r\n        }\r\n        const newUser = await userService.registerUser(req.body);\r\n        return res.status(201).json(newUser);\r\n      }\r\n    } catch (error) {\r\n      if (error.message === \"User already exists\") {\r\n        return res.status(409).json({ Error: \"User already exists\" });\r\n      } else {\r\n        return res.status(500).json({ Error: \"Registration failed\" });\r\n      }\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/users/{userid}:\r\n *   get:\r\n *     summary: \"Get User\"\r\n *     deprecated: false\r\n *     description: \"Retrieve a user by ID\"\r\n *     tags:\r\n *       - \"User\"\r\n *     parameters:\r\n *       - name: \"userid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the user to retrieve\"\r\n *     responses:\r\n *       \"200\":\r\n *         description: \"OK\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"403\":\r\n *         description: \"Forbidden - Invalid authorization\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Invalid authorization, cannot get User.\"\r\n *       \"404\":\r\n *         description: \"Not Found - Invalid userID\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"No user with this ID exists.\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nUserRouter.get(\r\n  \"/:userid\",\r\n  requiresAuthentication,\r\n  param(\"userid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const userid = req.params.userid;\r\n    if (req.role !== \"a\" && userid !== req.userId) {\r\n      res.status(403);\r\n      next(new Error(\"Invalid authorization, can not get User.\"));\r\n    } else {\r\n      try {\r\n        const user: userResource = await userService.getUser(userid);\r\n        res.status(200).json(user);\r\n      } catch (err) {\r\n        res.status(404);\r\n        next(err);\r\n      }\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/users/{userid}:\r\n *   put:\r\n *     summary: Update user details\r\n *     description: Update user details for a specific user.\r\n *     tags:\r\n *       - User\r\n *     parameters:\r\n *       - name: \"userid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the user to update\"\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               profilePicture:\r\n *                 type: string\r\n *                 example: []\r\n *                 format: binary\r\n *               email:\r\n *                 type: string\r\n *                 example: \"John@doe.com\"\r\n *               name[first]:\r\n *                     type: string\r\n *                     example: \"Test\"\r\n *               name[last]:\r\n *                     type: string\r\n *                     example: \"User\"\r\n *               password:\r\n *                 type: string\r\n *                 example: \"12abcAB!12abcAB!\"\r\n *               oldPassword:\r\n *                 type: string\r\n *                 example: \"12abcAB!\"\r\n *               birthDate:\r\n *                 type: string\r\n *                 example: \"2000-01-01\"\r\n *               gender:\r\n *                 type: string\r\n *                 example: \"Male\"\r\n *               address[street]:\r\n *                 type: string\r\n *                 example: \"123 Test Street\"\r\n *               address[houseNumber]:\r\n *                 type: string\r\n *                 example: \"1\"\r\n *               address[postalCode]:\r\n *                 type: string\r\n *                 example: \"12345\"\r\n *               address[city]:\r\n *                 type: string\r\n *                 example: \"Berlin\"\r\n *               address[country]:\r\n *                 type: string\r\n *                 example: \"DE\"\r\n *     responses:\r\n *       200:\r\n *         description: User details updated successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/IUser'\r\n *       403:\r\n *         description: Invalid authorization\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: Invalid authorization, cannot update user\r\n *       404:\r\n *         description: User not found\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: User not found\r\n *       500:\r\n *         description: Update failed\r\n *         content:\r\n *           application/json:\r\n *             example:\r\n *               error: Update failed\r\n */\r\nUserRouter.put(\r\n  \"/:userid\",\r\n  requiresAuthentication,\r\n  upload.single(\"profilePicture\"),\r\n  [param(\"userid\").isMongoId()],\r\n  validate,\r\n  async (req, res, next) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      if (req.file) {\r\n        // Delete the file\r\n        deleteProfilePicture(req.file.path);\r\n      }\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const userid = req.params.userid;\r\n    if (req.role === \"a\" || userid === req.userId) {\r\n      const user: userResource = await userService.getUser(userid);\r\n      try {\r\n        if (req.file) {\r\n          req.body.profilePicture = `/uploads/${req.file.filename}`;\r\n          if (user.profilePicture) {\r\n            deleteProfilePicture(user.profilePicture);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        deleteProfilePicture(req.body.profilePicture);\r\n        res.status(404).json({\r\n          Error: \"Can not delete Profile picture - no such file or directory\",\r\n        });\r\n      }\r\n    }\r\n    //req.body.name = JSON.parse(req.body.name);\r\n    const userResource = req.body as userResource; //matchedData(req) as userResource;\r\n    userResource.id = userid;\r\n    if (req.role === \"a\") {\r\n      try {\r\n        const updatedUser: userResource =\r\n          await userService.updateUserWithAdmin(userResource);\r\n        res.status(200).send(updatedUser);\r\n      } catch (err) {\r\n        res.status(404);\r\n        next(err);\r\n      }\r\n    } else {\r\n      if (req.userId !== userid) {\r\n        res.status(403);\r\n        next(new Error(\"Invalid authorization, can not update user.\"));\r\n      } else {\r\n        try {\r\n          let oldPw!: string;\r\n          if (req.body.oldPassword) {\r\n            oldPw = req.body.oldPassword;\r\n          }\r\n\r\n          const updatedUser = await userService.updateUserWithPw(\r\n            userResource,\r\n            oldPw,\r\n          );\r\n          res.status(200).send(updatedUser);\r\n        } catch (err) {\r\n          res.status(403);\r\n          next(new Error(\"Invalid authorization, probably invalid password.\"));\r\n        }\r\n      }\r\n    }\r\n  },\r\n);\r\n/**\r\n * @swagger\r\n * /api/users/{userid}:\r\n *   delete:\r\n *     summary: \"Delete User\"\r\n *     deprecated: false\r\n *     description: \"Delete a user by ID\"\r\n *     tags:\r\n *       - \"User\"\r\n *     parameters:\r\n *       - name: \"userid\"\r\n *         in: \"path\"\r\n *         required: true\r\n *         type: \"string\"\r\n *         description: \"The ID of the user to delete\"\r\n *     responses:\r\n *       \"204\":\r\n *         description: \"OK\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"403\":\r\n *         description: \"Forbidden - Invalid authorization\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Invalid authorization, cannot delete user.\"\r\n *       \"404\":\r\n *         description: \"Not Found - Probably invalid userid\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Probably invalid userid, cannot delete user.\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\n\r\nUserRouter.delete(\r\n  \"/:userid\",\r\n  requiresAuthentication,\r\n  param(\"userid\").isMongoId(),\r\n  async (req, res, next) => {\r\n    const userid = req.params.userid;\r\n    try {\r\n      if (req.role === \"a\") {\r\n        const user: userResource = await userService.getUser(userid);\r\n        const isDeleted: boolean = await userService.deleteUser(userid, false);\r\n        try {\r\n          if (user.profilePicture) {\r\n            deleteProfilePicture(user.profilePicture);\r\n          }\r\n        } catch (err) {\r\n          res.status(404).json({\r\n            Error: \"Can not delete Profile picture - no such file or directory\",\r\n          });\r\n        }\r\n        res.status(204).send(isDeleted);\r\n      } else {\r\n        if (req.userId === userid) {\r\n          const user: userResource = await userService.getUser(userid);\r\n          const isDeleted: boolean = await userService.deleteUser(userid, true);\r\n          try {\r\n            if (user.profilePicture) {\r\n              deleteProfilePicture(user.profilePicture);\r\n            }\r\n          } catch (err) {\r\n            res.status(404).json({\r\n              Error:\r\n                \"Can not delete Profile picture - no such file or directory\",\r\n            });\r\n          }\r\n          res.status(204).send(isDeleted);\r\n        } else {\r\n          res.send(403);\r\n          next(new Error(\"Invalid authorization, can not delete user.\"));\r\n        }\r\n      }\r\n    } catch (err) {\r\n      res.send(404);\r\n      next(new Error(\"Probably invalid userid, can not delete user.\"));\r\n    }\r\n  },\r\n);\r\nexport default UserRouter;\r\n"],"version":3}