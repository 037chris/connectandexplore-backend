{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\model\\EventModel.ts","mappings":";;;AAAA,uCAAuD;AACvD,2CAAsD;AAqBtD,MAAM,cAAc,GAAG,IAAI,iBAAM,CAAY;IAC3C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAA,oBAAoB,EAAE;IAC1D,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CAC9B,CAAC,CAAC;AAKH,MAAM,WAAW,GAAG,IAAI,iBAAM,CAAS;IACrC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACtC,OAAO,EAAE,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACrE,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC7C,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE;IAC/C,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IACpC,OAAO,EAAE,yBAAa;IACtB,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC5B,QAAQ,EAAE,CAAC,cAAc,CAAC;IAC1B,IAAI,EAAE,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAClE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;CAC7E,CAAC,CAAC;AAEH;;;;;;;;;;;MAWM;AAEO,QAAA,KAAK,GAAG,IAAA,gBAAK,EAAqB,OAAO,EAAE,WAAW,CAAC,CAAC;AACxD,QAAA,QAAQ,GAAG,IAAA,gBAAK,EAC3B,UAAU,EACV,cAAc,CACf,CAAC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\model\\EventModel.ts"],"sourcesContent":["import { Model, Schema, Types, model } from \"mongoose\";\r\nimport { IAddress, addressSchema } from \"./UserModel\";\r\n\r\nexport interface IEvent {\r\n  name: string;\r\n  creator: Types.ObjectId;\r\n  description: string;\r\n  price: number;\r\n  date: Date;\r\n  address: IAddress;\r\n  thumbnail?: string;\r\n  hashtags?: string[];\r\n  category: ICategory[];\r\n  chat: Types.ObjectId;\r\n  participants: Types.ObjectId[];\r\n}\r\n\r\nexport interface ICategory {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nconst categorySchema = new Schema<ICategory>({\r\n  name: { type: String, required: true/* , unique: true */ },\r\n  description: { type: String },\r\n});\r\n\r\ntype EventModel = Model<IEvent, {}>;\r\ntype CategoryModel = Model<ICategory, {}>;\r\n\r\nconst eventSchema = new Schema<IEvent>({\r\n  name: { type: String, required: true },\r\n  creator: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\r\n  description: { type: String, required: true },\r\n  price: { type: Number, required: true, min: 0 },\r\n  date: { type: Date, required: true },\r\n  address: addressSchema,\r\n  thumbnail: { type: String },\r\n  hashtags: [{ type: String }],\r\n  category: [categorySchema],\r\n  chat: { type: Schema.Types.ObjectId, ref: \"Chat\", required: true },\r\n  participants: [{ type: Schema.Types.ObjectId, ref: \"User\", required: true }],\r\n});\r\n\r\n/* \r\nZu implementieren?:\r\nMiddleware-Methode, die sicherstellt, dass nach Bearbeitung eines Events, alle Teilnehmer benachrichtigt werden\r\n\r\neventSchema.post('updateOne', async function (result, next) {\r\n    try {\r\n        //Funktion zur Benachrichtigung aller Teilnehmer\r\n    } catch (error) {\r\n        //throw new Error()\r\n    }\r\n    next();\r\n}); */\r\n\r\nexport const Event = model<IEvent, EventModel>(\"Event\", eventSchema);\r\nexport const Categoty = model<ICategory, CategoryModel>(\r\n  \"Category\",\r\n  categorySchema,\r\n);\r\n"],"version":3}