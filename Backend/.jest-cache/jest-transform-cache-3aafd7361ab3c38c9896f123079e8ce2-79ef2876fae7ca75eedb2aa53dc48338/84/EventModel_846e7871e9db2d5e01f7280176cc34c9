6324845fd97124fd1508644fe9ef0d71
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Categoty = exports.Event = void 0;
const mongoose_1 = require("mongoose");
const UserModel_1 = require("./UserModel");
const categorySchema = new mongoose_1.Schema({
    name: { type: String, required: true /* , unique: true */ },
    description: { type: String },
});
const eventSchema = new mongoose_1.Schema({
    name: { type: String, required: true },
    creator: { type: mongoose_1.Schema.Types.ObjectId, ref: "User", required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true, min: 0 },
    date: { type: Date, required: true },
    address: UserModel_1.addressSchema,
    thumbnail: { type: String },
    hashtags: [{ type: String }],
    category: [categorySchema],
    chat: { type: mongoose_1.Schema.Types.ObjectId, ref: "Chat", required: true },
    participants: [{ type: mongoose_1.Schema.Types.ObjectId, ref: "User", required: true }],
});
/*
Zu implementieren?:
Middleware-Methode, die sicherstellt, dass nach Bearbeitung eines Events, alle Teilnehmer benachrichtigt werden

eventSchema.post('updateOne', async function (result, next) {
    try {
        //Funktion zur Benachrichtigung aller Teilnehmer
    } catch (error) {
        //throw new Error()
    }
    next();
}); */
exports.Event = (0, mongoose_1.model)("Event", eventSchema);
exports.Categoty = (0, mongoose_1.model)("Category", categorySchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxuYWNldVxcT25lRHJpdmVcXERlc2t0b3BcXFN0dWRpdW1cXDUgU2VtZXN0ZXJcXFByb2pla3RcXGNvbm5lY3RhbmRleHBsb3JlXFxCYWNrZW5kXFxzcmNcXG1vZGVsXFxFdmVudE1vZGVsLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF1RDtBQUN2RCwyQ0FBc0Q7QUFxQnRELE1BQU0sY0FBYyxHQUFHLElBQUksaUJBQU0sQ0FBWTtJQUMzQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUEsb0JBQW9CLEVBQUU7SUFDMUQsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtDQUM5QixDQUFDLENBQUM7QUFLSCxNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFNLENBQVM7SUFDckMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ3RDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ3JFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUM3QyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUMvQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDcEMsT0FBTyxFQUFFLHlCQUFhO0lBQ3RCLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDM0IsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDNUIsUUFBUSxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQzFCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2xFLFlBQVksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUM3RSxDQUFDLENBQUM7QUFFSDs7Ozs7Ozs7Ozs7TUFXTTtBQUVPLFFBQUEsS0FBSyxHQUFHLElBQUEsZ0JBQUssRUFBcUIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3hELFFBQUEsUUFBUSxHQUFHLElBQUEsZ0JBQUssRUFDM0IsVUFBVSxFQUNWLGNBQWMsQ0FDZixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbmFjZXVcXE9uZURyaXZlXFxEZXNrdG9wXFxTdHVkaXVtXFw1IFNlbWVzdGVyXFxQcm9qZWt0XFxjb25uZWN0YW5kZXhwbG9yZVxcQmFja2VuZFxcc3JjXFxtb2RlbFxcRXZlbnRNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RlbCwgU2NoZW1hLCBUeXBlcywgbW9kZWwgfSBmcm9tIFwibW9uZ29vc2VcIjtcclxuaW1wb3J0IHsgSUFkZHJlc3MsIGFkZHJlc3NTY2hlbWEgfSBmcm9tIFwiLi9Vc2VyTW9kZWxcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY3JlYXRvcjogVHlwZXMuT2JqZWN0SWQ7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBwcmljZTogbnVtYmVyO1xyXG4gIGRhdGU6IERhdGU7XHJcbiAgYWRkcmVzczogSUFkZHJlc3M7XHJcbiAgdGh1bWJuYWlsPzogc3RyaW5nO1xyXG4gIGhhc2h0YWdzPzogc3RyaW5nW107XHJcbiAgY2F0ZWdvcnk6IElDYXRlZ29yeVtdO1xyXG4gIGNoYXQ6IFR5cGVzLk9iamVjdElkO1xyXG4gIHBhcnRpY2lwYW50czogVHlwZXMuT2JqZWN0SWRbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQ2F0ZWdvcnkge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBjYXRlZ29yeVNjaGVtYSA9IG5ldyBTY2hlbWE8SUNhdGVnb3J5Pih7XHJcbiAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlLyogLCB1bmlxdWU6IHRydWUgKi8gfSxcclxuICBkZXNjcmlwdGlvbjogeyB0eXBlOiBTdHJpbmcgfSxcclxufSk7XHJcblxyXG50eXBlIEV2ZW50TW9kZWwgPSBNb2RlbDxJRXZlbnQsIHt9PjtcclxudHlwZSBDYXRlZ29yeU1vZGVsID0gTW9kZWw8SUNhdGVnb3J5LCB7fT47XHJcblxyXG5jb25zdCBldmVudFNjaGVtYSA9IG5ldyBTY2hlbWE8SUV2ZW50Pih7XHJcbiAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgY3JlYXRvcjogeyB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogXCJVc2VyXCIsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgZGVzY3JpcHRpb246IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIHByaWNlOiB7IHR5cGU6IE51bWJlciwgcmVxdWlyZWQ6IHRydWUsIG1pbjogMCB9LFxyXG4gIGRhdGU6IHsgdHlwZTogRGF0ZSwgcmVxdWlyZWQ6IHRydWUgfSxcclxuICBhZGRyZXNzOiBhZGRyZXNzU2NoZW1hLFxyXG4gIHRodW1ibmFpbDogeyB0eXBlOiBTdHJpbmcgfSxcclxuICBoYXNodGFnczogW3sgdHlwZTogU3RyaW5nIH1dLFxyXG4gIGNhdGVnb3J5OiBbY2F0ZWdvcnlTY2hlbWFdLFxyXG4gIGNoYXQ6IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6IFwiQ2hhdFwiLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gIHBhcnRpY2lwYW50czogW3sgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6IFwiVXNlclwiLCByZXF1aXJlZDogdHJ1ZSB9XSxcclxufSk7XHJcblxyXG4vKiBcclxuWnUgaW1wbGVtZW50aWVyZW4/OlxyXG5NaWRkbGV3YXJlLU1ldGhvZGUsIGRpZSBzaWNoZXJzdGVsbHQsIGRhc3MgbmFjaCBCZWFyYmVpdHVuZyBlaW5lcyBFdmVudHMsIGFsbGUgVGVpbG5laG1lciBiZW5hY2hyaWNodGlndCB3ZXJkZW5cclxuXHJcbmV2ZW50U2NoZW1hLnBvc3QoJ3VwZGF0ZU9uZScsIGFzeW5jIGZ1bmN0aW9uIChyZXN1bHQsIG5leHQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy9GdW5rdGlvbiB6dXIgQmVuYWNocmljaHRpZ3VuZyBhbGxlciBUZWlsbmVobWVyXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKClcclxuICAgIH1cclxuICAgIG5leHQoKTtcclxufSk7ICovXHJcblxyXG5leHBvcnQgY29uc3QgRXZlbnQgPSBtb2RlbDxJRXZlbnQsIEV2ZW50TW9kZWw+KFwiRXZlbnRcIiwgZXZlbnRTY2hlbWEpO1xyXG5leHBvcnQgY29uc3QgQ2F0ZWdvdHkgPSBtb2RlbDxJQ2F0ZWdvcnksIENhdGVnb3J5TW9kZWw+KFxyXG4gIFwiQ2F0ZWdvcnlcIixcclxuICBjYXRlZ29yeVNjaGVtYSxcclxuKTtcclxuIl0sInZlcnNpb24iOjN9