{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\services\\UserService.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\services\\UserService.test.ts"],"sourcesContent":["import { clearDatabase, closeDatabase, connect } from \"../../database/db\";\r\nimport { userResource } from \"../../src/Resources\";\r\nimport { IAddress, IUser, User } from \"../../src/model/UserModel\";\r\nimport { UserService } from \"../../src/services/UserService\";\r\n\r\nconst a: IAddress = {\r\n  street: \"Street\",\r\n  houseNumber: \"1\",\r\n  postalCode: \"12345\",\r\n  city: \"Berlin\",\r\n  country: \"Germany\",\r\n};\r\nconst u: userResource = {\r\n  email: \"John@doe.com\",\r\n  name: {\r\n    first: \"John\",\r\n    last: \"Doe\",\r\n  },\r\n  password: \"12abcAB!\",\r\n  isAdministrator: true,\r\n  address: a,\r\n  birthDate: new Date(),\r\n  gender: \"male\",\r\n  isActive: true,\r\n  profilePicture: \"picture1\",\r\n  socialMediaUrls: {\r\n    facebook: \"facebook\",\r\n    instagram: \"instagram\",\r\n  },\r\n};\r\n\r\nconst userService: UserService = new UserService();\r\nconst NON_EXISTING_ID = \"635d2e796ea2e8c9bde5787c\";\r\ndescribe(\"userModel test\", () => {\r\n  beforeAll(async () => await connect());\r\n  afterEach(async () => await clearDatabase());\r\n  afterAll(async () => await closeDatabase());\r\n\r\n  test(\"createUser function\", async () => {\r\n    const user = await userService.createUser(u);\r\n    expect(user.id).toBeDefined();\r\n    expect(user.name.first).toBe(u.name.first);\r\n    expect(user.name.last).toBe(u.name.last);\r\n    expect(user.email).toBe(u.email);\r\n    expect(user.password).toBeUndefined();\r\n    const res = await User.findById(user.id);\r\n    expect(await res.isCorrectPassword(\"12abcAB!\")).toBeTruthy();\r\n    expect(user.address).toMatchObject(a);\r\n    expect(user.birthDate).toBe(u.birthDate);\r\n    expect(user.gender).toBe(u.gender);\r\n    expect(user.isActive).toBeTruthy();\r\n    expect(user.profilePicture).toBe(u.profilePicture);\r\n    expect(user.socialMediaUrls).toMatchObject(u.socialMediaUrls);\r\n  });\r\n\r\n  test(\"getUser works and returns user without password\", async () => {\r\n    const user = await userService.createUser(u);\r\n    await expect(userService.getUser(undefined)).rejects.toThrow(\r\n      \"Can not get user, userID is invalid\",\r\n    );\r\n    await expect(userService.getUser(NON_EXISTING_ID)).rejects.toThrow(\r\n      `No user with id: ${NON_EXISTING_ID} exists.`,\r\n    );\r\n    const res: userResource = await userService.getUser(user.id);\r\n    expect(user.id).toBeDefined();\r\n    expect(user.name.first).toBe(u.name.first);\r\n    expect(user.name.last).toBe(u.name.last);\r\n    expect(user.email).toBe(u.email);\r\n    expect(user.password).toBeUndefined();\r\n    const r = await User.findById(user.id);\r\n    expect(await r.isCorrectPassword(\"12abcAB!\")).toBeTruthy();\r\n    expect(user.address).toMatchObject(a);\r\n    expect(user.birthDate).toBe(u.birthDate);\r\n    expect(user.gender).toBe(u.gender);\r\n    expect(user.isActive).toBeTruthy();\r\n    expect(user.profilePicture).toBe(u.profilePicture);\r\n    expect(user.socialMediaUrls).toMatchObject(u.socialMediaUrls);\r\n  });\r\n\r\n  test(\"get all users also returns inactive users, getUser(userID) throws error at inactive user.\", async () => {\r\n    const u1 = await userService.createUser(u);\r\n    const user1: userResource = {\r\n      id: u1.id,\r\n      email: u1.email,\r\n      name: {\r\n        first: u1.name.first,\r\n        last: u1.name.last,\r\n      },\r\n      isAdministrator: u1.isAdministrator,\r\n      address: u1.address,\r\n      birthDate: u1.birthDate,\r\n      gender: u1.gender,\r\n      isActive: u1.isActive,\r\n    };\r\n    u.isActive = false;\r\n    u.email = \"Jane@doe.com\";\r\n    u.name.first = \"Jane\";\r\n    const u2 = await User.create(u);\r\n    const user2: userResource = {\r\n      id: u2.id,\r\n      email: u2.email,\r\n      name: {\r\n        first: u2.name.first,\r\n        last: u2.name.last,\r\n      },\r\n      isAdministrator: u2.isAdministrator,\r\n      address: u2.address,\r\n      birthDate: u2.birthDate,\r\n      gender: u2.gender,\r\n      isActive: u2.isActive,\r\n    };\r\n    await expect(userService.getUser(u2.id)).rejects.toThrow(\r\n      `No user with id: ${u2.id} exists.`,\r\n    );\r\n    const users = await userService.getUsers();\r\n    expect(users.users.length).toBe(2);\r\n    expect(users.users[0].isActive).toBe(user1.isActive);\r\n    expect(users.users[1].isActive).toBe(user2.isActive);\r\n  });\r\n\r\n  test(\"updateUserWithAdmin user update validations\", async () => {\r\n    const user = await userService.createUser(u);\r\n    const existingUserId = user.id;\r\n    const updatedUser = {\r\n      ...u,\r\n      id: existingUserId,\r\n      email: \"newemail@example.com\",\r\n    };\r\n    const result = await userService.updateUserWithAdmin(updatedUser);\r\n    expect(result.id).toBeDefined();\r\n    expect(result.name.first).toBe(updatedUser.name.first);\r\n    expect(result.name.last).toBe(updatedUser.name.last);\r\n    expect(result.email).toBe(updatedUser.email);\r\n    expect(result.password).toBeUndefined();\r\n    expect(result.address).toMatchObject(updatedUser.address);\r\n    expect(result.birthDate).toBe(updatedUser.birthDate);\r\n    expect(result.gender).toBe(updatedUser.gender);\r\n    expect(result.isActive).toBeTruthy();\r\n    expect(result.profilePicture).toBe(updatedUser.profilePicture);\r\n    expect(result.socialMediaUrls).toMatchObject(updatedUser.socialMediaUrls);\r\n\r\n    //Test for missing userID\r\n    const userWithNoId = { ...u, id: undefined };\r\n    await expect(userService.updateUserWithAdmin(userWithNoId)).rejects.toThrow(\r\n      \"User id is missing, cannot update User.\",\r\n    );\r\n\r\n    //Test for non-existing userID\r\n    const nonExistingUser = { ...u, id: NON_EXISTING_ID };\r\n    await expect(\r\n      userService.updateUserWithAdmin(nonExistingUser),\r\n    ).rejects.toThrow(\r\n      `No user with id: ${NON_EXISTING_ID} found, cannot update`,\r\n    );\r\n  });\r\n\r\n  test(\"updateUserWithAdmin duplicate email check\", async () => {\r\n    const user = await userService.createUser(u);\r\n    await userService.createUser({ ...u, email: \"duplicate@example.com\" });\r\n    //Create another user with a different ID but same email for duplicate check\r\n    const userWithDuplicateEmail = { ...user, email: \"duplicate@example.com\" };\r\n    await expect(\r\n      userService.updateUserWithAdmin(userWithDuplicateEmail),\r\n    ).rejects.toThrow(\"Duplicate email\");\r\n  });\r\n\r\n  test(\"updateUserWithPw update with old password to update password\", async () => {\r\n    const oldPw: string = u.password;\r\n    const user: userResource = await userService.createUser(u);\r\n\r\n    user.name.first = \"Jane\";\r\n    user.password = \"newPassword123!\";\r\n    const updatedUser: userResource = await userService.updateUserWithPw(\r\n      user,\r\n      oldPw,\r\n    );\r\n    expect(updatedUser.name.first).toBe(\"Jane\");\r\n    const Jane = await User.findById(user.id).exec();\r\n    expect(Jane.password).toBeDefined();\r\n    expect(await Jane.isCorrectPassword(\"newPassword123!\")).toBeTruthy();\r\n\r\n    //Test if user does not update Password on wrong old password.\r\n    await expect(\r\n      userService.updateUserWithPw(user, \"wrongPassword\"),\r\n    ).rejects.toThrow(\"invalid oldPassword, can not update User!\");\r\n  });\r\n\r\n  test(\"updateUserWithPw throws errors on invalid userdata\", async () => {\r\n    const user: userResource = await userService.createUser(u);\r\n    user.id = undefined;\r\n    user.name.first = \"Jane\";\r\n    await expect(userService.updateUserWithPw(user)).rejects.toThrow(\r\n      \"User id is missing, cannot update User.\",\r\n    );\r\n    user.id = NON_EXISTING_ID;\r\n    await expect(userService.updateUserWithPw(user)).rejects.toThrow(\r\n      `No user with id: ${NON_EXISTING_ID} found, cannot update`,\r\n    );\r\n  });\r\n\r\n  test(\"updateUserWithPw duplicate email check\", async () => {\r\n    const user = await userService.createUser(u);\r\n    await userService.createUser({ ...u, email: \"duplicate@example.com\" });\r\n    //Create another user with a different ID but same email for duplicate check\r\n    const userWithDuplicateEmail = { ...user, email: \"duplicate@example.com\" };\r\n    await expect(\r\n      userService.updateUserWithPw(userWithDuplicateEmail),\r\n    ).rejects.toThrow(\"Duplicate email\");\r\n  });\r\n\r\n  test(\"updateUserWithPw can not change isActive status of user\", async () => {\r\n    const user = await userService.createUser(u);\r\n    user.isActive = false;\r\n    user.name.first = \"Jane\";\r\n    const res = await userService.updateUserWithPw(user);\r\n    expect(res.isActive).toBeTruthy();\r\n    expect(res.name.first).toBe(\"Jane\");\r\n  });\r\n\r\n  test(\"deleteUser deletes user from database (when performed by an admin)\", async () => {\r\n    const user = await userService.createUser(u);\r\n    const res = await userService.deleteUser(user.id, false);\r\n    expect(res).toBeTruthy();\r\n    const noUserFound = await User.findById(user.id);\r\n    expect(noUserFound).toBeNull();\r\n\r\n    await expect(\r\n      userService.deleteUser(NON_EXISTING_ID, false),\r\n    ).rejects.toThrow(\r\n      \"User not found, probably invalid userID or user is already deleted\",\r\n    );\r\n    await expect(userService.deleteUser(\"\", false)).rejects.toThrow(\r\n      \"invalid userID, can not delete/inactivate account\",\r\n    );\r\n  });\r\n\r\n  test(\"deleteUser inactivates acc when inactivateAccount = true\", async () => {\r\n    const user = await userService.createUser(u);\r\n    const res = await userService.deleteUser(user.id, true);\r\n    expect(res).toBeTruthy();\r\n    const inactiveUser = await User.findById(user.id);\r\n    expect(inactiveUser.isActive).toBeFalsy();\r\n  });\r\n});\r\n"],"version":3}