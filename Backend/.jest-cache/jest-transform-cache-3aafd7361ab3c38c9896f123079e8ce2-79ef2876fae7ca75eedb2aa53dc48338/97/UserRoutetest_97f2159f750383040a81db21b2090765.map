{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\routes\\UserRoute.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\routes\\UserRoute.test.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\nimport { clearDatabase, closeDatabase, connect } from \"../../database/db\";\r\nimport app from \"../../server\";\r\n//import { req } from \"../jest.setup\";\r\nimport { IAddress, User } from \"../../src/model/UserModel\";\r\nimport {\r\n  LoginResource,\r\n  userResource,\r\n  usersResource,\r\n} from \"../../src/Resources\";\r\nimport { UserService } from \"../../src/services/UserService\";\r\nimport request from \"supertest\";\r\nconst a: IAddress = {\r\n  street: \"Street\",\r\n  houseNumber: \"1\",\r\n  postalCode: \"12345\",\r\n  city: \"Berlin\",\r\n  country: \"Germany\",\r\n};\r\nconst u: userResource = {\r\n  email: \"John@doe.com\",\r\n  name: {\r\n    first: \"John\",\r\n    last: \"Doe\",\r\n  },\r\n  password: \"12abcAB!\",\r\n  isAdministrator: true,\r\n  address: a,\r\n  birthDate: new Date(),\r\n  gender: \"male\",\r\n  isActive: true,\r\n  //profilePicture: \"picture1\",\r\n  socialMediaUrls: {\r\n    facebook: \"facebook\",\r\n    instagram: \"instagram\",\r\n  },\r\n};\r\n\r\nconst JaneData: userResource = {\r\n  email: \"Jane@doe.com\",\r\n  name: {\r\n    first: \"Jane\",\r\n    last: \"Doe\",\r\n  },\r\n  password: \"12abcAB!\",\r\n  isAdministrator: false,\r\n  address: a,\r\n  birthDate: new Date(),\r\n  gender: \"male\",\r\n  isActive: true,\r\n  // profilePicture: \"picture1\",\r\n  socialMediaUrls: {\r\n    facebook: \"facebook\",\r\n    instagram: \"instagram\",\r\n  },\r\n};\r\n\r\nconst userService: UserService = new UserService();\r\nconst NON_EXISTING_ID = \"635d2e796ea2e8c9bde5787c\";\r\nlet admin: userResource;\r\nlet AdminToken: string;\r\nlet jane: userResource;\r\nlet token: string;\r\nlet req = request(app);\r\ndescribe(\"userRoute test\", () => {\r\n  beforeAll(async () => await connect());\r\n  beforeEach(async () => {\r\n    admin = await userService.createUser(u);\r\n    jane = await userService.createUser(JaneData);\r\n    //const req = request(app);\r\n    const adminloginData = { email: \"John@doe.com\", password: \"12abcAB!\" };\r\n    const adminRes = await req.post(`/api/login`).send(adminloginData);\r\n    const AdminLoginResource = adminRes.body as LoginResource;\r\n    AdminToken = AdminLoginResource.access_token;\r\n\r\n    const janeLoginData = { email: \"Jane@doe.com\", password: \"12abcAB!\" };\r\n    const janeRes = await req.post(`/api/login`).send(janeLoginData);\r\n    const janeLoginResource = janeRes.body as LoginResource;\r\n    token = janeLoginResource.access_token;\r\n  });\r\n  afterEach(async () => await clearDatabase());\r\n  afterAll(async () => {\r\n    await mongoose.connection.close(); // Perform final cleanup after all tests\r\n  });\r\n\r\n  test(\"getUsers\", async () => {\r\n    //const req = request(app);\r\n    const response = await req\r\n      .get(\"/api/users\")\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(response.statusCode).toBe(200);\r\n    const users: usersResource = response.body;\r\n    expect(users.users.length).toBe(3);\r\n    let userPos: number;\r\n    if (users.users[0].name.first === u.name.first) {\r\n      userPos = 0;\r\n    } else if (users.users[1].name.first === u.name.first) {\r\n      userPos = 1;\r\n    } else if (users.users[2].name.first === u.name.first) {\r\n      userPos = 2;\r\n    }\r\n    expect(users.users[userPos].id).toBeDefined();\r\n    expect(users.users[userPos].name.first).toBe(u.name.first);\r\n    expect(users.users[userPos].name.last).toBe(u.name.last);\r\n    expect(users.users[userPos].email).toBe(u.email);\r\n    expect(users.users[userPos].password).toBeUndefined();\r\n    expect(users.users[userPos].address).toMatchObject(a);\r\n    //expect(users.users[0].birthDate).toBe(u.birthDate);\r\n    expect(users.users[userPos].gender).toBe(u.gender);\r\n    expect(users.users[userPos].isActive).toBeTruthy();\r\n    //expect(users.users[0].profilePicture).toBe(u.profilePicture);\r\n    expect(users.users[userPos].socialMediaUrls).toMatchObject(\r\n      u.socialMediaUrls\r\n    );\r\n  });\r\n\r\n  test(\"getUsers fails on request by non-admin\", async () => {\r\n    //const req = request(app);\r\n    const response = await req\r\n      .get(\"/api/users\")\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(response.statusCode).toBe(403);\r\n  });\r\n\r\n  test(\"get User request responses with 404 on invalid userID\", async () => {\r\n    //const req = request(app);\r\n    const response = await req\r\n      .get(`/api/users/${NON_EXISTING_ID}`)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n\r\n    expect(response.statusCode).toBe(404);\r\n  });\r\n\r\n  test(\"get User request responses with 400 on undefined userID\", async () => {\r\n    //const req = request(app);\r\n    const response = await req\r\n      .get(`/api/users/invalidID`)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n\r\n    expect(response.statusCode).toBe(400);\r\n    expect(response.body.errors).toBeDefined();\r\n  });\r\n\r\n  test(\"get User returns any user when performed by an admin and returns user when performed by non-admin\", async () => {\r\n    const response = await req\r\n      .get(`/api/users/${jane.id}`)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(response.statusCode).toBe(200);\r\n    expect(response.body.name.first).toBe(jane.name.first);\r\n\r\n    const res = await req\r\n      .get(`/api/users/${jane.id}`)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(res.statusCode).toBe(200);\r\n    expect(res.body.name.first).toBe(jane.name.first);\r\n  });\r\n\r\n  test(\"put user successfully updates user in db and returns updated user information\", async () => {\r\n    const newName = \"newName\";\r\n    jane.name.last = newName;\r\n    const res = await req\r\n      .put(`/api/users/${jane.id}`)\r\n      .send(jane)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(res.statusCode).toBe(200);\r\n    expect(res.body.name.last).toBe(newName);\r\n\r\n    const janeDataFromDB = await User.findById(jane.id).exec();\r\n    expect(janeDataFromDB.name.last).toBe(newName);\r\n\r\n    const updatedName = \"newName-adminUpdate\";\r\n    jane.name.last = updatedName;\r\n    const response = await req\r\n      .put(`/api/users/${jane.id}`)\r\n      .send(jane)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(response.body.name.last).toBe(updatedName);\r\n\r\n    const janeDataFromDBAdminUpdate = await User.findById(jane.id).exec();\r\n    expect(janeDataFromDBAdminUpdate.name.last).toBe(updatedName);\r\n  });\r\n\r\n  test(\"should return error on updating email to duplicate email\", async () => {\r\n    jane.email = admin.email;\r\n    const res = await req\r\n      .put(`/api/users/${jane.id}`)\r\n      .send(jane)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(res.statusCode).toBe(404);\r\n  });\r\n\r\n  test(\"should return error on trying to update other users as non-admin\", async () => {\r\n    admin.name.first = \"newName\";\r\n    const res = await req\r\n      .put(`/api/users/${admin.id}`)\r\n      .send(admin)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(res.statusCode).toBe(403);\r\n  });\r\n\r\n  test(\"testing for validation errors on put user route\", async () => {\r\n    const invalidUserResource: userResource = {\r\n      email: \"\",\r\n      name: {\r\n        first: \"\",\r\n        last: \"\",\r\n      },\r\n      isAdministrator: false,\r\n      address: a,\r\n      birthDate: jane.birthDate,\r\n      gender: \"\",\r\n      isActive: true,\r\n    };\r\n\r\n    const res = await req\r\n      .put(`/api/users/${jane.id}`)\r\n      .send(invalidUserResource)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(res.statusCode).toBe(400);\r\n    expect(res.body.errors).toBeDefined();\r\n  });\r\n\r\n  test(\"put user with invalid old password returns error\", async () => {\r\n    const requestData = jane;\r\n    requestData.oldPassword = \"invalidPW123!\";\r\n    requestData.password = \"newStrongPassword123!\";\r\n\r\n    const res = await req\r\n      .put(`/api/users/${jane.id}`)\r\n      .send(requestData)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(res.statusCode).toBe(403);\r\n\r\n    const dbJane = await User.findById(jane.id).exec();\r\n    expect(await dbJane.isCorrectPassword(\"newPassowrd\")).toBeFalsy();\r\n  });\r\n\r\n  test(\"should allow an admin to delete any user\", async () => {\r\n    const response = await req\r\n      .delete(`/api/users/${jane.id}`)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(response.statusCode).toBe(204);\r\n  });\r\n\r\n  test(\"should allow a user to inactivate their own account\", async () => {\r\n    const response = await req\r\n      .delete(`/api/users/${jane.id}`)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(response.statusCode).toBe(204);\r\n  });\r\n\r\n  test(\"should prevent a non-admin user from deleting another user\", async () => {\r\n    const response = await req\r\n      .delete(`/api/users/${admin.id}`)\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n    expect(response.statusCode).toBe(403);\r\n  });\r\n\r\n  test(\"should return an error for an invalid user ID\", async () => {\r\n    const response = await req\r\n      .delete(`/api/users/${NON_EXISTING_ID}`)\r\n      .set(\"Authorization\", `Bearer ${AdminToken}`);\r\n    expect(response.statusCode).toBe(404);\r\n  });\r\n});\r\n"],"version":3}