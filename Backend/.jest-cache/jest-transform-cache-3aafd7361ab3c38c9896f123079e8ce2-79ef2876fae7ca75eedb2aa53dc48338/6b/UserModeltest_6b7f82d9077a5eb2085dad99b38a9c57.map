{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\model\\UserModel.test.ts","mappings":";;AAAA,0CAA0E;AAC1E,yDAAkE;AAElE,MAAM,CAAC,GAAa;IAClB,MAAM,EAAE,QAAQ;IAChB,WAAW,EAAE,GAAG;IAChB,UAAU,EAAE,OAAO;IACnB,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,SAAS;CACnB,CAAC;AACF,IAAI,CAAC,GAAU;IACb,KAAK,EAAE,cAAc;IACrB,IAAI,EAAE;QACJ,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,KAAK;KACZ;IACD,QAAQ,EAAE,KAAK;IACf,eAAe,EAAE,IAAI;IACrB,OAAO,EAAE,CAAC;IACV,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,IAAI;IACd,cAAc,EAAE,UAAU;IAC1B,eAAe,EAAE;QACf,QAAQ,EAAE,UAAU;QACpB,SAAS,EAAE,WAAW;KACvB;CACF,CAAC;AAEF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAA,YAAO,GAAE,CAAC,CAAC;IACvC,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAA,kBAAa,GAAE,CAAC,CAAC;IAC7C,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAA,kBAAa,GAAE,CAAC,CAAC;IAE5C,IAAI,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,IAAI,GAAG,MAAM,gBAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACpC,MAAM,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,IAAI,GAAG,MAAM,gBAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC;QACjC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAClB,MAAM,GAAG,GAAG,MAAM,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,CAAC,MAAM,GAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,gBAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,gBAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACtB,MAAM,MAAM,CAAC,gBAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\tests\\model\\UserModel.test.ts"],"sourcesContent":["import { clearDatabase, closeDatabase, connect } from \"../../database/db\";\r\nimport { IAddress, IUser, User } from \"../../src/model/UserModel\";\r\n\r\nconst a: IAddress = {\r\n  street: \"Street\",\r\n  houseNumber: \"1\",\r\n  postalCode: \"12345\",\r\n  city: \"Berlin\",\r\n  country: \"Germany\",\r\n};\r\nlet u: IUser = {\r\n  email: \"John@doe.com\",\r\n  name: {\r\n    first: \"John\",\r\n    last: \"Doe\",\r\n  },\r\n  password: \"123\",\r\n  isAdministrator: true,\r\n  address: a,\r\n  birthDate: new Date(),\r\n  gender: \"male\",\r\n  isActive: true,\r\n  profilePicture: \"picture1\",\r\n  socialMediaUrls: {\r\n    facebook: \"facebook\",\r\n    instagram: \"instagram\",\r\n  },\r\n};\r\n\r\ndescribe(\"userModel test\", () => {\r\n  beforeAll(async () => await connect());\r\n  afterEach(async () => await clearDatabase());\r\n  afterAll(async () => await closeDatabase());\r\n\r\n  test(\"create User\", async () => {\r\n    const user = await User.create(u);\r\n    expect(user.id).toBeDefined();\r\n    expect(user.name.first).toBe(u.name.first);\r\n    expect(user.name.last).toBe(u.name.last);\r\n    expect(user.email).toBe(u.email);\r\n    expect(user.password).not.toBe(u.password);\r\n    expect(user.password).toBeDefined();\r\n    expect(await user.isCorrectPassword(\"123\")).toBeTruthy();\r\n    expect(user.address).toMatchObject(a);\r\n    expect(user.birthDate).toBe(u.birthDate);\r\n    expect(user.gender).toBe(u.gender);\r\n    expect(user.isActive).toBeTruthy();\r\n    expect(user.profilePicture).toBe(u.profilePicture);\r\n    expect(user.socialMediaUrls).toMatchObject(u.socialMediaUrls);\r\n  });\r\n\r\n  test(\"updated user password middleware\", async () => {\r\n    const user = await User.create(u);\r\n    user.password = \"456\";\r\n    user.email = \"John@some-host.de\";\r\n    await user.save();\r\n    const res = await User.findById(user.id);\r\n    expect(res.password).not.toBe(\"456\");\r\n    expect(res.password).not.toBe(\"123\");\r\n    expect(res.password).toBeDefined();\r\n    expect(await res.isCorrectPassword(\"456\")).toBeTruthy();\r\n    expect(res.email).toBe(\"John@some-host.de\");\r\n    expect(await User.findOne({ email: \"John@doe.com\" })).toBeNull();\r\n  });\r\n\r\n  test(\"rejects on duplicate email\", async () => {\r\n    await User.create(u);\r\n    u.name.first = \"Jane\";\r\n    await expect(User.create(u)).rejects.toThrow();\r\n  });\r\n});\r\n"],"version":3}