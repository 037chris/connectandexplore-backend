{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\services\\JWTService.ts","mappings":";;;;;;AAAA,+CAAwD;AACxD,kDAA0C;AAC1C,oDAA4B;AAC5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAChB;;;;;GAKG;AACI,KAAK,UAAU,0BAA0B,CAC9C,KAAa,EACb,QAAgB;IAEhB,MAAM,KAAK,GAAG,MAAM,gBAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACvE,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;QAC/B,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,EAAE;QAC7C,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;IACtC,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACvC;IACD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAEhD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;IAChC,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;KAChC;IAED,MAAM,GAAG,GAAG,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAE9C,MAAM,OAAO,GAAe;QAC1B,GAAG,EAAE,IAAI,CAAC,EAAE;QACZ,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,GAAG;QACR,IAAI,EAAE,IAAI;KACX,CAAC;IACF,MAAM,SAAS,GAAG,IAAA,mBAAI,EAAC,OAAO,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;IAChE,OAAO,SAAS,CAAC;AACnB,CAAC;AAnCD,gEAmCC;AAED;;;;;;;;;GASG;AACH,SAAgB,SAAS,CAAC,SAA6B;;IAIrD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;IACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;IACtC,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACvC;IACD,IAAI;QACF,MAAM,OAAO,GAAG,IAAA,qBAAM,EAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC1C,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE;YAClE,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,MAAA,OAAO,CAAC,GAAG,0CAAE,QAAQ,EAAG,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC;YACxE,OAAO,MAAM,CAAC;SACf;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;KACjC;IACD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACnC,CAAC;AArBD,8BAqBC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\services\\JWTService.ts"],"sourcesContent":["import { JwtPayload, sign, verify } from \"jsonwebtoken\";\r\nimport { User } from \"../model/UserModel\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n/**\r\n * @param email E-Mail-Adresse des Users\r\n * @param password Das Passwort des Users\r\n * @returns JWT als String, im JWT ist sub gesetzt mit der Mongo-ID des Users als String sowie role mit \"u\" oder \"a\" (User oder Admin);\r\n *      oder undefined wenn Authentifizierung fehlschl채gt.\r\n */\r\nexport async function verifyPasswordAndCreateJWT(\r\n  email: string,\r\n  password: string,\r\n): Promise<string | undefined> {\r\n  const users = await User.find({ email: email, isActive: true }).exec();\r\n  if (!users || users.length != 1) {\r\n    return undefined;\r\n  }\r\n  const user = users[0];\r\n  if (!(await user.isCorrectPassword(password))) {\r\n    return undefined;\r\n  }\r\n\r\n  const secret = process.env.JWT_SECRET;\r\n  if (!secret) {\r\n    throw new Error(\"JWT_SECRET not set\");\r\n  }\r\n  const timeInSec = Math.floor(Date.now() / 1000);\r\n\r\n  const ttl = process.env.JWT_TTL;\r\n  if (!ttl) {\r\n    throw new Error(\"TTL not set\");\r\n  }\r\n\r\n  const exp = timeInSec + parseInt(ttl);\r\n  const role = user.isAdministrator ? \"a\" : \"u\";\r\n\r\n  const payload: JwtPayload = {\r\n    sub: user.id,\r\n    iat: timeInSec,\r\n    exp: exp,\r\n    role: role,\r\n  };\r\n  const jwtString = sign(payload, secret, { algorithm: \"HS256\" });\r\n  return jwtString;\r\n}\r\n\r\n/**\r\n * Gibt user id (Mongo-ID) und ein K체rzel der Rolle zur체ck, falls Verifizierung erfolgreich, sonst wird ein Error geworfen.\r\n *\r\n * Die zur Pr체fung der Signatur notwendige Passphrase wird aus der Umgebungsvariable `JWT_SECRET` gelesen,\r\n * falls diese nicht gesetzt ist, wird ein Fehler geworfen.\r\n *\r\n * @param jwtString das JWT\r\n * @return user id des Users (Mongo ID als String) und Rolle (u oder a) des Benutzers;\r\n *      niemals undefined (bei Fehler wird ein Error geworfen)\r\n */\r\nexport function verifyJWT(jwtString: string | undefined): {\r\n  userId: string;\r\n  role: \"u\" | \"a\";\r\n} {\r\n  if (!jwtString) {\r\n    throw new Error(\"No JWT-string\");\r\n  }\r\n  const secret = process.env.JWT_SECRET;\r\n  if (!secret) {\r\n    throw new Error(\"JWT_SECRET not set\");\r\n  }\r\n  try {\r\n    const payload = verify(jwtString, secret);\r\n    if (typeof payload === \"object\" && \"sub\" in payload && payload.sub) {\r\n      const result = { userId: payload.sub?.toString()!, role: payload.role };\r\n      return result;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(\"verify_error\");\r\n  }\r\n  throw new Error(\"invalid_token\");\r\n}\r\n"],"version":3}