{"file":"C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\UsersRouter.ts","mappings":";;;;;AAAA,sDAA8B;AAC9B,yDAAsD;AACtD,qDAA0D;AAG1D,MAAM,WAAW,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AACrC,MAAM,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAC;AACtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,uCAAsB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACzE,IAAI,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,CAAC;QACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAC3C,CAAC;SAAM,CAAC;QACN,IAAI,CAAC;YACH,MAAM,KAAK,GAAkB,MAAM,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,CAAC;IACH,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,WAAW,CAAC","names":[],"sources":["C:\\Users\\naceu\\OneDrive\\Desktop\\Studium\\5 Semester\\Projekt\\connectandexplore\\Backend\\src\\routes\\UsersRouter.ts"],"sourcesContent":["import express from \"express\";\r\nimport { UserService } from \"../services/UserService\";\r\nimport { requiresAuthentication } from \"./authentication\";\r\nimport { usersResource } from \"../Resources\";\r\n\r\nconst UsersRouter = express.Router();\r\nconst userService = new UserService();\r\n/**\r\n * @swagger\r\n * /api/users/:\r\n *   get:\r\n *     summary: \"Get Users\"\r\n *     deprecated: false\r\n *     description: \"Retrieve all users\"\r\n *     tags:\r\n *       - \"User\"\r\n *     responses:\r\n *       \"200\":\r\n *         description: \"OK\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties: {}\r\n *       \"403\":\r\n *         description: \"Forbidden - Invalid authorization\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Invalid authorization.\"\r\n *       \"404\":\r\n *         description: \"Not Found - Users not found\"\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: \"object\"\r\n *               properties:\r\n *                 error:\r\n *                   type: \"string\"\r\n *                   example: \"Users not found.\"\r\n *     security:\r\n *       - bearerAuth: []\r\n */\r\nUsersRouter.get(\"/users\", requiresAuthentication, async (req, res, next) => {\r\n  if (req.role !== \"a\") {\r\n    res.status(403);\r\n    next(new Error(\"Invalid authorization\"));\r\n  } else {\r\n    try {\r\n      const users: usersResource = await userService.getUsers();\r\n      res.status(200).send(users);\r\n    } catch (err) {\r\n      res.status(404);\r\n      next(err);\r\n    }\r\n  }\r\n});\r\n\r\nexport default UsersRouter;\r\n"],"version":3}